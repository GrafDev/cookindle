import { Application, Assets, Sprite, Graphics, Texture, BlurFilter } from 'pixi.js';
import { CONFIG } from './config.js';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDev = import.meta.env.DEV;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                 ('ontouchstart' in window) || 
                 (navigator.maxTouchPoints > 0) ||
                 (window.matchMedia && window.matchMedia("(pointer: coarse)").matches);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥–ª—ã
let needleBaseY = 0; // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
let needlePressed = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è

// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º dev —Ä–µ–∂–∏–º –≤ HTML
if (isDev) {
    document.body.classList.add('dev-mode');
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
if (isDev) {
    console.log('üîç User Agent:', navigator.userAgent);
    console.log('üîç ontouchstart in window:', 'ontouchstart' in window);
    console.log('üîç maxTouchPoints:', navigator.maxTouchPoints);
    console.log('üîç pointer: coarse:', window.matchMedia && window.matchMedia("(pointer: coarse)").matches);
    console.log('üì± isMobile:', isMobile);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function createDebugInfo() {
    const debugDiv = document.createElement('div');
    debugDiv.id = 'debug-info';
    debugDiv.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 10px;
        font-family: monospace;
        font-size: 12px;
        z-index: 9999;
        max-width: 300px;
        white-space: pre-wrap;
    `;
    
    const debugInfo = [
        `isMobile: ${isMobile}`,
        `ontouchstart: ${'ontouchstart' in window}`,
        `maxTouchPoints: ${navigator.maxTouchPoints}`,
        `pointer: coarse: ${window.matchMedia && window.matchMedia("(pointer: coarse)").matches}`,
        `User Agent: ${navigator.userAgent.substring(0, 50)}...`
    ].join('\n');
    
    debugDiv.textContent = debugInfo;
    document.body.appendChild(debugDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (debugDiv.parentNode) {
            debugDiv.parentNode.removeChild(debugDiv);
        }
    }, 10000);
}

// –ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å–∞–Ω–∏—è—Ö
function showTouchDebug(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
    if (!isDev) return;
    
    let touchDebugDiv = document.getElementById('touch-debug');
    
    if (!touchDebugDiv) {
        touchDebugDiv = document.createElement('div');
        touchDebugDiv.id = 'touch-debug';
        touchDebugDiv.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255,0,0,0.8);
            color: white;
            padding: 10px;
            font-family: monospace;
            font-size: 14px;
            z-index: 9999;
            max-width: 200px;
            white-space: pre-wrap;
        `;
        document.body.appendChild(touchDebugDiv);
    }
    
    touchDebugDiv.textContent = message;
    
    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (touchDebugDiv.parentNode) {
            touchDebugDiv.style.opacity = '0.5';
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    const canvas = document.getElementById('game-canvas');
    const gameArea = document.querySelector('.game-area');
    
    // –°–æ–∑–¥–∞–µ–º PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const app = new Application();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await app.init({
        canvas: canvas,
        width: gameArea.clientWidth,
        height: gameArea.clientHeight,
        backgroundColor: CONFIG.pixi.backgroundColor,
        resizeTo: gameArea
    });
    
    // Dev –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isDev) {
        console.log('üéÆ Cookindle App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìê –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        console.log('üñ•Ô∏è PixiJS –≤–µ—Ä—Å–∏—è:', app.renderer.type);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        if (isDev) {
            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
        updateCookieSize();
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (isDev) {
        window.app = app;
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    await initGame(app);
    
    return app;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initGame(app) {
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await loadAssets();
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        createCookie(app);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∏–≥–ª—É
        await loadNeedleTexture();
        createNeedle(app);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        setupInteractivity(app);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        startPulseAnimation(app);
        
        if (isDev) {
            console.log('üç™ –ü–µ—á–µ–Ω—å–µ —Å–æ–∑–¥–∞–Ω–æ');
            console.log('ü™° –ò–≥–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadAssets() {
    try {
        // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–±—Ö–æ–¥–∏–º –±–∞–≥ PixiJS Assets)
        const cookieImageUrl = (await import('./assets/textures/bg_cooke.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã:', cookieImageUrl);
        }
        
        if (cookieImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = cookieImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', error);
        
        // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ public –ø–∞–ø–∫—É
        try {
            const publicUrl = '/assets/textures/bg_cooke.png';
            
            if (isDev) {
                console.log('üîç –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public –ø–∞–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é');
                console.log('üìÅ URL –∏–∑ public:', publicUrl);
            }
            
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = publicUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ public –ø–∞–ø–∫–∏');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
            
        } catch (publicError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public:', publicError);
            
            // –°–ø–æ—Å–æ–± 3: Fallback - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (isDev) {
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É');
            }
            createPixiTexture();
        }
    }
}


// –†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∑–æ—Ä–æ–≤ –Ω–∞ –ø–µ—á–µ–Ω—å–µ
function drawCookiePatterns(graphics, paintingType) {
    const patternConfig = CONFIG.cookie;
    
    for (let i = 0; i < patternConfig.patternCount; i++) {
        const angle = (i / patternConfig.patternCount) * Math.PI * 2;
        const radius = 60 + Math.random() * 80;
        const x = 200 + Math.cos(angle) * radius + (Math.random() - 0.5) * 40;
        const y = 200 + Math.sin(angle) * radius + (Math.random() - 0.5) * 40;
        const size = patternConfig.patternSize.min + Math.random() * (patternConfig.patternSize.max - patternConfig.patternSize.min);
        
        // –†–∏—Å—É–µ–º —É–∑–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (paintingType) {
            case "circle":
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "star":
                drawStarPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "cross":
                drawCrossPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            default:
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–≥–æ —É–∑–æ—Ä–∞
function drawCirclePattern(graphics, x, y, size, color) {
    graphics.circle(x, y, size);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥—á–∞—Ç–æ–≥–æ —É–∑–æ—Ä–∞
function drawStarPattern(graphics, x, y, size, color) {
    const points = 5;
    const outerRadius = size;
    const innerRadius = size * 0.4;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—É
    graphics.moveTo(x, y - outerRadius);
    
    for (let i = 0; i < points * 2; i++) {
        const angle = (i * Math.PI) / points;
        const radius = i % 2 === 0 ? outerRadius : innerRadius;
        const px = x + Math.cos(angle - Math.PI / 2) * radius;
        const py = y + Math.sin(angle - Math.PI / 2) * radius;
        graphics.lineTo(px, py);
    }
    
    graphics.closePath();
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä–µ—Å—Ç–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —É–∑–æ—Ä–∞
function drawCrossPattern(graphics, x, y, size, color) {
    const thickness = size * 0.3;
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - thickness / 2, y - size, thickness, size * 2);
    graphics.fill(color);
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - size, y - thickness / 2, size * 2, thickness);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function drawCenterShape(graphics, x, y, shapeConfig) {
    const { form, size, color, lineWidth, alpha, dashed, dashLength, gapLength, borderRadius } = shapeConfig;
    
    if (isDev) {
        console.log('üî∑ –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É:', { form, size, color, lineWidth, alpha, dashed, dashLength, gapLength, borderRadius });
    }
    
    const halfSize = size / 2;
    
    // –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (dashed && dashLength && gapLength) {
        switch (form) {
            case 1: // –ö—Ä—É–≥
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                drawDashedRoundedRect(graphics, x, y, size, borderRadius || 0, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawDashedRoundedTriangle(graphics, x, y, size, borderRadius || 0, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            default:
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
        }
    } else {
        // –û–±—ã—á–Ω–∞—è —Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è
        switch (form) {
            case 1: // –ö—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                graphics.roundRect(x - halfSize, y - halfSize, size, size, borderRadius || 0);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                drawRoundedTriangleShape(graphics, x, y, size, borderRadius || 0);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            default:
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawTriangleShape(graphics, x, y, size) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ –µ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É
    const centroidOffsetY = height / 3; // –¶–µ–Ω—Ç—Ä–æ–∏–¥ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    
    // –†–∏—Å—É–µ–º —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ (x, y)
    graphics.moveTo(x, y - (height - centroidOffsetY));           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x + halfBase, y + centroidOffsetY);           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x - halfBase, y + centroidOffsetY);           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.closePath();
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawRoundedTriangleShape(graphics, x, y, size, borderRadius) {
    if (borderRadius <= 0) {
        drawTriangleShape(graphics, x, y, size);
        return;
    }
    
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    // –¢–æ—á–∫–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    const points = [
        { x: x, y: y - (height - centroidOffsetY) },           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        { x: x + halfBase, y: y + centroidOffsetY },           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        { x: x - halfBase, y: y + centroidOffsetY }            // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ];
    
    // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
    for (let i = 0; i < 3; i++) {
        const current = points[i];
        const next = points[(i + 1) % 3];
        const prev = points[(i + 2) % 3];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –∫ —Å–æ—Å–µ–¥–Ω–∏–º
        const toPrev = { x: prev.x - current.x, y: prev.y - current.y };
        const toNext = { x: next.x - current.x, y: next.y - current.y };
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã
        const lenPrev = Math.sqrt(toPrev.x * toPrev.x + toPrev.y * toPrev.y);
        const lenNext = Math.sqrt(toNext.x * toNext.x + toNext.y * toNext.y);
        
        toPrev.x /= lenPrev;
        toPrev.y /= lenPrev;
        toNext.x /= lenNext;
        toNext.y /= lenNext;
        
        // –¢–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        const startPoint = {
            x: current.x + toPrev.x * borderRadius,
            y: current.y + toPrev.y * borderRadius
        };
        const endPoint = {
            x: current.x + toNext.x * borderRadius,
            y: current.y + toNext.y * borderRadius
        };
        
        if (i === 0) {
            graphics.moveTo(startPoint.x, startPoint.y);
        } else {
            graphics.lineTo(startPoint.x, startPoint.y);
        }
        
        // –†–∏—Å—É–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª
        graphics.arcTo(current.x, current.y, endPoint.x, endPoint.y, borderRadius);
    }
    
    graphics.closePath();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã—Ö —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
function drawDashedRoundedRect(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha) {
    const halfSize = size / 2;
    
    if (borderRadius > 0) {
        // –î–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º —Ä–∏—Å—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—É–Ω–∫—Ç–∏—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        drawDashedRoundedRectSegments(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha);
    } else {
        // –û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
    }
}

function drawDashedRoundedTriangle(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha) {
    if (borderRadius > 0) {
        // –î–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º —Ä–∏—Å—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—É–Ω–∫—Ç–∏—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        drawDashedRoundedTriangleSegments(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha);
    } else {
        // –û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
    }
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–≥–º–µ–Ω—Ç—ã
function drawDashedRoundedRectSegments(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha) {
    const halfSize = size / 2;
    
    // –†–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä –ø–æ —á–µ—Ç—ã—Ä–µ–º —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    const sides = [
        // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
        { start: { x: x - halfSize + borderRadius, y: y - halfSize }, end: { x: x + halfSize - borderRadius, y: y - halfSize } },
        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞  
        { start: { x: x + halfSize, y: y - halfSize + borderRadius }, end: { x: x + halfSize, y: y + halfSize - borderRadius } },
        // –ù–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
        { start: { x: x + halfSize - borderRadius, y: y + halfSize }, end: { x: x - halfSize + borderRadius, y: y + halfSize } },
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
        { start: { x: x - halfSize, y: y + halfSize - borderRadius }, end: { x: x - halfSize, y: y - halfSize + borderRadius } }
    ];
    
    // –†–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    sides.forEach(side => {
        drawDashedLine(graphics, side.start, side.end, dashLength, gapLength, color, lineWidth, alpha);
    });
    
    // –†–∏—Å—É–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –∫–∞–∫ –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –¥—É–≥–∏
    const corners = [
        { center: { x: x - halfSize + borderRadius, y: y - halfSize + borderRadius }, startAngle: Math.PI, endAngle: Math.PI * 1.5 },
        { center: { x: x + halfSize - borderRadius, y: y - halfSize + borderRadius }, startAngle: Math.PI * 1.5, endAngle: Math.PI * 2 },
        { center: { x: x + halfSize - borderRadius, y: y + halfSize - borderRadius }, startAngle: 0, endAngle: Math.PI * 0.5 },
        { center: { x: x - halfSize + borderRadius, y: y + halfSize - borderRadius }, startAngle: Math.PI * 0.5, endAngle: Math.PI }
    ];
    
    corners.forEach(corner => {
        drawDashedArc(graphics, corner.center.x, corner.center.y, borderRadius, corner.startAngle, corner.endAngle, dashLength, gapLength, color, lineWidth, alpha);
    });
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–≥–º–µ–Ω—Ç—ã
function drawDashedRoundedTriangleSegments(graphics, x, y, size, borderRadius, dashLength, gapLength, color, lineWidth, alpha) {
    // –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–ª–æ—à–Ω—É—é –ª–∏–Ω–∏—é (—Å–ª–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø—É–Ω–∫—Ç–∏—Ä –Ω–∞ –∫—Ä–∏–≤—ã—Ö)
    drawRoundedTriangleShape(graphics, x, y, size, borderRadius);
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏
function drawDashedLine(graphics, start, end, dashLength, gapLength, color, lineWidth, alpha) {
    const dx = end.x - start.x;
    const dy = end.y - start.y;
    const length = Math.sqrt(dx * dx + dy * dy);
    const totalDashLength = dashLength + gapLength;
    const numDashes = Math.floor(length / totalDashLength);
    
    const unitX = dx / length;
    const unitY = dy / length;
    
    for (let i = 0; i < numDashes; i++) {
        const dashStart = i * totalDashLength;
        const dashEnd = dashStart + dashLength;
        
        const startX = start.x + unitX * dashStart;
        const startY = start.y + unitY * dashStart;
        const endX = start.x + unitX * dashEnd;
        const endY = start.y + unitY * dashEnd;
        
        graphics.moveTo(startX, startY);
        graphics.lineTo(endX, endY);
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –¥—É–≥–∏
function drawDashedArc(graphics, centerX, centerY, radius, startAngle, endAngle, dashLength, gapLength, color, lineWidth, alpha) {
    const arcLength = Math.abs(endAngle - startAngle) * radius;
    const totalDashLength = dashLength + gapLength;
    const numDashes = Math.floor(arcLength / totalDashLength);
    
    const angleStep = (endAngle - startAngle) / (arcLength / totalDashLength);
    const dashAngleLength = (dashLength / radius);
    
    for (let i = 0; i < numDashes; i++) {
        const dashStartAngle = startAngle + (i * angleStep * totalDashLength / radius);
        const dashEndAngle = dashStartAngle + dashAngleLength;
        
        // –†–∏—Å—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –¥—É–≥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à—Ç—Ä–∏—Ö–∞
        graphics.arc(centerX, centerY, radius, dashStartAngle, dashEndAngle);
        graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
function drawDashedCircle(graphics, x, y, radius, dashLength, gapLength, color, lineWidth, alpha) {
    if (isDev) {
        console.log('üî∏ –†–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–π –∫—Ä—É–≥:', { radius, dashLength, gapLength, color, lineWidth, alpha });
    }
    
    const circumference = 2 * Math.PI * radius;
    const totalDashLength = dashLength + gapLength;
    const numDashes = Math.floor(circumference / totalDashLength);
    
    for (let i = 0; i < numDashes; i++) {
        const startAngle = (i * totalDashLength / radius);
        const endAngle = startAngle + (dashLength / radius);
        
        const startX = x + Math.cos(startAngle) * radius;
        const startY = y + Math.sin(startAngle) * radius;
        const endX = x + Math.cos(endAngle) * radius;
        const endY = y + Math.sin(endAngle) * radius;
        
        graphics.moveTo(startX, startY);
        graphics.lineTo(endX, endY);
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
function drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const halfSize = size / 2;
    const sides = [
        [{x: x - halfSize, y: y - halfSize}, {x: x + halfSize, y: y - halfSize}], // –í–µ—Ä—Ö
        [{x: x + halfSize, y: y - halfSize}, {x: x + halfSize, y: y + halfSize}], // –ü—Ä–∞–≤–æ
        [{x: x + halfSize, y: y + halfSize}, {x: x - halfSize, y: y + halfSize}], // –ù–∏–∑
        [{x: x - halfSize, y: y + halfSize}, {x: x - halfSize, y: y - halfSize}]  // –õ–µ–≤–æ
    ];
    
    sides.forEach(side => {
        const start = side[0];
        const end = side[1];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let i = 0; i < numDashes; i++) {
            const t1 = (i * totalDashLength) / length;
            const t2 = ((i * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    });
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    const points = [
        {x: x, y: y - (height - centroidOffsetY)},           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        {x: x + halfBase, y: y + centroidOffsetY},           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        {x: x - halfBase, y: y + centroidOffsetY},           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ];
    
    for (let i = 0; i < 3; i++) {
        const start = points[i];
        const end = points[(i + 1) % 3];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let j = 0; j < numDashes; j++) {
            const t1 = (j * totalDashLength) / length;
            const t2 = ((j * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —É–≥–ª—É–±–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä—É–≥–∞
function drawGradientCircleDepression(graphics, x, y, radius, gradientConfig) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä—É–≥–∞:', { radius, width, innerColor, outerColor });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫—Ä—É–≥–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–≤–Ω—É—Ç—Ä—å –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞)
    const steps = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    const stepWidth = width / steps;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1); // –û—Ç 0 –¥–æ 1
        const currentRadius = radius - (i * stepWidth); // –ò–¥–µ–º –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä—å
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
        const currentColor = interpolateColor(innerColor, outerColor, progress);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentAlpha = innerAlpha + (outerAlpha - innerAlpha) * progress;
        
        // –†–∏—Å—É–µ–º –∫–æ–ª—å—Ü–æ
        graphics.circle(x, y, currentRadius);
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —É–≥–ª—É–±–ª–µ–Ω–∏—è –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
function drawGradientRectDepression(graphics, x, y, size, gradientConfig, borderRadius = 0) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞:', { size, width, innerColor, outerColor, borderRadius });
    }
    
    const steps = 20;
    const stepWidth = width / steps;
    const halfSize = size / 2;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1);
        const currentSize = size - (i * stepWidth * 2); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–¥–µ–º –≤–Ω—É—Ç—Ä—å
        const currentHalfSize = currentSize / 2;
        const currentBorderRadius = borderRadius * (currentSize / size); // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentColor = interpolateColor(innerColor, outerColor, progress);
        const currentAlpha = innerAlpha + (outerAlpha - innerAlpha) * progress;
        
        // –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        graphics.roundRect(x - currentHalfSize, y - currentHalfSize, currentSize, currentSize, currentBorderRadius);
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —É–≥–ª—É–±–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawGradientTriangleDepression(graphics, x, y, size, gradientConfig, borderRadius = 0) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞:', { size, width, innerColor, outerColor, borderRadius });
    }
    
    const steps = 20;
    const stepWidth = width / steps;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
    const adjustedSize = borderRadius > 0 ? size - borderRadius * 0.5 : size;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1);
        const currentSize = adjustedSize - (i * stepWidth * 2); // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const currentBorderRadius = borderRadius * (currentSize / adjustedSize); // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentColor = interpolateColor(innerColor, outerColor, progress);
        const currentAlpha = innerAlpha + (outerAlpha - innerAlpha) * progress;
        
        // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        if (borderRadius > 0) {
            drawRoundedTriangleShape(graphics, x, y, currentSize, currentBorderRadius);
        } else {
            drawTriangleShape(graphics, x, y, currentSize);
        }
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –∫—Ä—É–≥–∞ (–≤—ã–ø—É–∫–ª–æ—Å—Ç—å)
function drawOuterGradientCircle(graphics, x, y, radius, gradientConfig) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫—Ä—É–≥–∞:', { radius, width, innerColor, outerColor });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫—Ä—É–≥–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–≤–Ω—É—Ç—Ä—å –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞, –∫–∞–∫ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
    const steps = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    const stepWidth = width / steps;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1); // –û—Ç 0 –¥–æ 1
        const currentRadius = radius + (i * stepWidth); // –ò–¥–µ–º –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –Ω–∞—Ä—É–∂—É
        
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (—Ç–µ–º–Ω—ã–π —É –∫–æ–Ω—Ç—É—Ä–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–Ω–∞—Ä—É–∂–∏)
        const invertedProgress = 1 - progress;
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
        const currentColor = interpolateColor(outerColor, innerColor, invertedProgress);
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentAlpha = outerAlpha + (innerAlpha - outerAlpha) * invertedProgress;
        
        // –†–∏—Å—É–µ–º –∫–æ–ª—å—Ü–æ
        graphics.circle(x, y, currentRadius);
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞ (–≤—ã–ø—É–∫–ª–æ—Å—Ç—å)
function drawOuterGradientRect(graphics, x, y, size, gradientConfig, borderRadius = 0) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞:', { size, width, innerColor, outerColor, borderRadius });
    }
    
    const steps = 20;
    const stepWidth = width / steps;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1);
        const currentSize = size + (i * stepWidth * 2); // –ò–¥–µ–º –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –Ω–∞—Ä—É–∂—É
        const currentHalfSize = currentSize / 2;
        const currentBorderRadius = borderRadius * (currentSize / size); // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (—Ç–µ–º–Ω—ã–π —É –∫–æ–Ω—Ç—É—Ä–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–Ω–∞—Ä—É–∂–∏)
        const invertedProgress = 1 - progress;
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentColor = interpolateColor(outerColor, innerColor, invertedProgress);
        const currentAlpha = outerAlpha + (innerAlpha - outerAlpha) * invertedProgress;
        
        // –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        graphics.roundRect(x - currentHalfSize, y - currentHalfSize, currentSize, currentSize, currentBorderRadius);
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤—ã–ø—É–∫–ª–æ—Å—Ç—å)
function drawOuterGradientTriangle(graphics, x, y, size, gradientConfig, borderRadius = 0) {
    const { width, innerColor, outerColor, innerAlpha, outerAlpha } = gradientConfig;
    
    if (isDev) {
        console.log('üåÖ –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞:', { size, width, innerColor, outerColor, borderRadius });
    }
    
    const steps = 20;
    const stepWidth = width / steps;
    
    for (let i = 0; i < steps; i++) {
        const progress = i / (steps - 1);
        const currentSize = size + (i * stepWidth * 2); // –ò–¥–µ–º –æ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –Ω–∞—Ä—É–∂—É
        const currentBorderRadius = borderRadius * (currentSize / size); // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (—Ç–µ–º–Ω—ã–π —É –∫–æ–Ω—Ç—É—Ä–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–Ω–∞—Ä—É–∂–∏)
        const invertedProgress = 1 - progress;
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        const currentColor = interpolateColor(outerColor, innerColor, invertedProgress);
        const currentAlpha = outerAlpha + (innerAlpha - outerAlpha) * invertedProgress;
        
        // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        if (borderRadius > 0) {
            drawRoundedTriangleShape(graphics, x, y, currentSize, currentBorderRadius);
        } else {
            drawTriangleShape(graphics, x, y, currentSize);
        }
        graphics.stroke({ color: currentColor, width: stepWidth, alpha: currentAlpha });
    }
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–≤–æ–¥–∫–æ–π
function createCenterShapeWithPulse(x, y, cookieSize) {
    const container = new Graphics();
    const shapeSize = cookieSize * CONFIG.centerShape.sizePercent;
    const shapeConfig = { ...CONFIG.centerShape, size: shapeSize };
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (CONFIG.centerShape.gradient.enabled) {
        const gradientShape = new Graphics();
        const halfSize = shapeSize / 2;
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã
        switch (CONFIG.centerShape.form) {
            case 1: // –ö—Ä—É–≥
                drawGradientCircleDepression(gradientShape, 0, 0, halfSize, CONFIG.centerShape.gradient);
                break;
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                drawGradientRectDepression(gradientShape, 0, 0, shapeSize, CONFIG.centerShape.gradient, CONFIG.centerShape.borderRadius);
                break;
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawGradientTriangleDepression(gradientShape, 0, 0, shapeSize, CONFIG.centerShape.gradient, CONFIG.centerShape.borderRadius);
                break;
            default:
                drawGradientCircleDepression(gradientShape, 0, 0, halfSize, CONFIG.centerShape.gradient);
        }
        
        container.addChild(gradientShape);
        
        if (isDev) {
            console.log('üåÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ñ–æ—Ä–º—ã:', CONFIG.centerShape.form);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç (–≤—ã–ø—É–∫–ª–æ—Å—Ç—å) –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if (CONFIG.centerShape.outerGradient.enabled) {
        const outerGradientShape = new Graphics();
        const halfSize = shapeSize / 2;
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã
        switch (CONFIG.centerShape.form) {
            case 1: // –ö—Ä—É–≥
                drawOuterGradientCircle(outerGradientShape, 0, 0, halfSize, CONFIG.centerShape.outerGradient);
                break;
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                drawOuterGradientRect(outerGradientShape, 0, 0, shapeSize, CONFIG.centerShape.outerGradient, CONFIG.centerShape.borderRadius);
                break;
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawOuterGradientTriangle(outerGradientShape, 0, 0, shapeSize, CONFIG.centerShape.outerGradient, CONFIG.centerShape.borderRadius);
                break;
            default:
                drawOuterGradientCircle(outerGradientShape, 0, 0, halfSize, CONFIG.centerShape.outerGradient);
        }
        
        container.addChild(outerGradientShape);
        
        if (isDev) {
            console.log('üåÖ –í–Ω–µ—à–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã:', CONFIG.centerShape.form);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω
    if (!CONFIG.centerShape.gradient.enabled) {
        const mainShape = new Graphics();
        drawCenterShape(mainShape, 0, 0, shapeConfig);
        container.addChild(mainShape);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é –æ–±–≤–æ–¥–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (CONFIG.centerShape.pulse.enabled) {
        const pulseShape = new Graphics();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ —Ñ–æ—Ä–º—É, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const pulseConfig = {
            ...shapeConfig,
            color: CONFIG.centerShape.pulse.colorFrom,
            lineWidth: CONFIG.centerShape.pulse.lineWidth,
            alpha: CONFIG.centerShape.pulse.alpha,
            dashed: CONFIG.centerShape.pulse.dashed,
            dashLength: CONFIG.centerShape.pulse.dashLength,
            gapLength: CONFIG.centerShape.pulse.gapLength
        };
        
        drawCenterShape(pulseShape, 0, 0, pulseConfig);
        container.addChild(pulseShape);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        container.pulseShape = pulseShape;
        container.pulseStartTime = Date.now();
        container.cookieSize = cookieSize;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container.x = x;
    container.y = y;
    
    return container;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —á–µ—Ä–µ–∑ PixiJS Graphics
function createPixiTexture() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º PixiJS —Ç–µ–∫—Å—Ç—É—Ä—É –ø–µ—á–µ–Ω—å—è');
        console.log('üé® –£–∑–æ—Ä –Ω–∞ –ø–µ—á–µ–Ω—å–µ:', CONFIG.cookie.painting);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤—É –ø–µ—á–µ–Ω—å—è (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PixiJS v8)
    graphics.circle(200, 200, 180);
    graphics.fill(0xD2691E); // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–æ—Ä—ã –Ω–∞ –ø–µ—á–µ–Ω—å–µ
    drawCookiePatterns(graphics, CONFIG.cookie.painting);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    drawCenterShape(graphics, 200, 200, CONFIG.centerShape);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const app = window.app; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à Assets
    Assets.cache.set('cookie', texture);
    
    if (isDev) {
        console.log('‚úÖ PixiJS —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø–µ—á–µ–Ω—å—è —Å–æ–∑–¥–∞–Ω–∞');
        console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã: 400x400px');
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
function createCookie(app) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è (70% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * 0.7;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
    const cookieTexture = Assets.get('cookie');
    const cookieSprite = new Sprite(cookieTexture);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    cookieSprite.anchor.set(0.5); // –¶–µ–Ω—Ç—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    app.stage.addChild(cookieSprite);
    
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ–≤–µ—Ä—Ö –ø–µ—á–µ–Ω—å—è
    const centerShapeContainer = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize);
    app.stage.addChild(centerShapeContainer);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    window.cookie = cookieSprite;
    window.centerShape = centerShapeContainer;
    
    if (isDev) {
        console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è:', cookieSize);
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
    }
    
    return cookieSprite;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateCookieSize() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—á–µ–Ω—å–µ –∏–∑ –∫–µ—à–∞
    const cookieSprite = window.cookie;
    const centerShapeGraphics = window.centerShape;
    if (!cookieSprite) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è (70% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * 0.7;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    const centerShapeContainer = window.centerShape;
    if (centerShapeContainer) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        centerShapeContainer.parent?.removeChild(centerShapeContainer);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newCenterShape = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize);
        window.app.stage.addChild(newCenterShape);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.centerShape = newCenterShape;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã
    updateNeedleSize();
    
    console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –æ–±–Ω–æ–≤–ª–µ–Ω:', cookieSize);
    console.log('üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateNeedleSize() {
    const needleSprite = window.needle;
    if (!needleSprite) return;
    
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * 0.7;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏–≥–ª—ã
    const needleTexture = needleSprite.texture;
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    needleSprite.scale.set(scale);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        needleSprite.y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        needleBaseY = needleSprite.y;
    }
    
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω:', needleSize, 'scale:', scale);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã
async function loadNeedleTexture() {
    try {
        // –°–ø–æ—Å–æ–± 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import
        const needleImageUrl = (await import('./assets/textures/needle.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', needleImageUrl);
        }
        
        if (needleImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = needleImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('needle', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∏–≥–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import –∏–≥–ª—ã –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã:', error);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        createProgrammaticNeedle();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–≥–ª—ã –∫–∞–∫ fallback
function createProgrammaticNeedle() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∏–≥–ª—É');
    }
    
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É
    // –û—Å—Ç—Ä–∏–µ
    graphics.moveTo(0, 0);
    graphics.lineTo(3, 10);
    graphics.lineTo(-3, 10);
    graphics.closePath();
    graphics.fill(0x888888);
    
    // –°—Ç–µ—Ä–∂–µ–Ω—å
    graphics.rect(-1, 10, 2, 20);
    graphics.fill(0x888888);
    
    // –£—à–∫–æ
    graphics.circle(0, 32, 3);
    graphics.stroke({ color: 0x888888, width: 1 });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    const app = window.app;
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
    Assets.cache.set('needle', texture);
    
    if (isDev) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–≥–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ –∏–≥–ª—ã
function createNeedle(app) {
    const needleTexture = Assets.get('needle');
    const needleSprite = new Sprite(needleTexture);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * 0.7;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥–ª—ã
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    needleSprite.scale.set(scale);
    needleSprite.zIndex = 1000; // –ò–≥–ª–∞ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.visible = true;
        needleSprite.anchor.set(CONFIG.needle.mouseOffset.x, CONFIG.needle.mouseOffset.y); // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        needleSprite.x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        needleSprite.y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        needleBaseY = needleSprite.y;
    } else {
        needleSprite.visible = CONFIG.needle.visible;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    app.stage.addChild(needleSprite);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    window.needle = needleSprite;
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã:', needleSize, 'scale:', scale);
    console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobile);
    
    return needleSprite;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function setupInteractivity(app) {
    const gameArea = document.querySelector('.game-area');
    const needleSprite = window.needle;
    
    if (!needleSprite) {
        console.error('‚ùå –°–ø—Ä–∞–π—Ç –∏–≥–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    showTouchDebug(`SETUP: ${isMobile ? 'MOBILE' : 'DESKTOP'}`);
    
    if (isMobile) {
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        setupMobileInteractivity(gameArea);
    } else {
        // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ª–æ–≥–∏–∫–∞ —Å –º—ã—à—å—é
        setupDesktopInteractivity(gameArea);
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    gameArea.addEventListener('click', (event) => {
        showTouchDebug('UNIVERSAL CLICK');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        showTouchDebug(`CLICK: ${x.toFixed(0)}, ${y.toFixed(0)}`);
        
        if (isMobile) {
            animateNeedleToTouch(x, y);
            animateNeedlePress(true);
            
            setTimeout(() => {
                animateNeedlePress(false);
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }, 300);
        }
    });
    
    console.log('üñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è', isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
function setupDesktopInteractivity(gameArea) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousemove', (event) => {
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        updateNeedlePosition(x, y, 'mouse');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –º—ã—à–∏ –≤ –æ–±–ª–∞—Å—Ç—å
    gameArea.addEventListener('mouseenter', () => {
        showNeedle();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
    gameArea.addEventListener('mouseleave', () => {
        hideNeedle();
        animateNeedlePress(false); // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousedown', (event) => {
        event.preventDefault();
        animateNeedlePress(true);
    });
    
    gameArea.addEventListener('mouseup', () => {
        animateNeedlePress(false);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function setupMobileInteractivity(gameArea) {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    showTouchDebug('SETUP MOBILE');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const canvas = document.getElementById('game-canvas');
    const elements = [gameArea, canvas, document.body, window];
    
    elements.forEach((element, index) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π
        element.addEventListener('touchstart', (event) => {
            showTouchDebug(`TOUCH START ${index}`);
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è gameArea –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (element === gameArea) {
                event.preventDefault();
                const touch = event.touches[0];
                const rect = gameArea.getBoundingClientRect();
                const x = touch.clientX - rect.left;
                const y = touch.clientY - rect.top;
                
                showTouchDebug(`TOUCH: ${x.toFixed(0)}, ${y.toFixed(0)}`);
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥–ª—ã –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –∫ –∫–∞—Å–∞–Ω–∏—é)
                animateNeedleToTouch(x, y);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è
                animateNeedlePress(true);
            }
        }, { passive: false });
        
        element.addEventListener('touchend', (event) => {
            showTouchDebug(`TOUCH END ${index}`);
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è gameArea –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (element === gameArea) {
                // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É
                animateNeedlePress(false);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥–ª—É –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }
        }, { passive: false });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º pointer events –∫–∞–∫ fallback
    gameArea.addEventListener('pointerdown', (event) => {
        showTouchDebug('POINTER DOWN');
        
        if (event.pointerType === 'touch') {
            const rect = gameArea.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            animateNeedleToTouch(x, y);
            animateNeedlePress(true);
        }
    });
    
    gameArea.addEventListener('pointerup', (event) => {
        showTouchDebug('POINTER UP');
        
        if (event.pointerType === 'touch') {
            animateNeedlePress(false);
            
            setTimeout(() => {
                const gameWidth = gameArea.clientWidth;
                const gameHeight = gameArea.clientHeight;
                const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                animateNeedleToTouch(staticX, staticY);
            }, 200);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ click –∫–∞–∫ –µ—â–µ –æ–¥–∏–Ω fallback
    gameArea.addEventListener('click', (event) => {
        showTouchDebug('CLICK EVENT');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        animateNeedleToTouch(x, y);
        animateNeedlePress(true);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            animateNeedlePress(false);
            
            setTimeout(() => {
                const gameWidth = gameArea.clientWidth;
                const gameHeight = gameArea.clientHeight;
                const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                animateNeedleToTouch(staticX, staticY);
            }, 200);
        }, 300);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mousedown/mouseup –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–∞–∫ fallback
    gameArea.addEventListener('mousedown', (event) => {
        showTouchDebug('MOUSEDOWN EVENT');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        animateNeedleToTouch(x, y);
        animateNeedlePress(true);
    });
    
    gameArea.addEventListener('mouseup', (event) => {
        showTouchDebug('MOUSEUP EVENT');
        
        animateNeedlePress(false);
        
        setTimeout(() => {
            const gameWidth = gameArea.clientWidth;
            const gameHeight = gameArea.clientHeight;
            const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
            const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
            animateNeedleToTouch(staticX, staticY);
        }, 200);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥–ª—É
function showNeedle() {
    const needleSprite = window.needle;
    if (needleSprite) {
        needleSprite.visible = true;
        
        if (isDev) {
            console.log('üëÅÔ∏è –ò–≥–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
    }
}

// –°–∫—Ä—ã—Ç—å –∏–≥–ª—É
function hideNeedle() {
    const needleSprite = window.needle;
    if (needleSprite) {
        needleSprite.visible = false;
        
        if (isDev) {
            console.log('üôà –ò–≥–ª–∞ —Å–∫—Ä—ã—Ç–∞');
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã
function updateNeedlePosition(x, y, inputType) {
    const needleSprite = window.needle;
    if (!needleSprite) return;
    
    const needleConfig = CONFIG.needle;
    
    if (inputType === 'mouse') {
        // –î–ª—è –º—ã—à–∏ - –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        needleSprite.anchor.set(needleConfig.mouseOffset.x, needleConfig.mouseOffset.y);
        needleSprite.x = x;
        needleSprite.y = y;
        needleBaseY = y;
    } else if (inputType === 'touch') {
        // –î–ª—è –∫–∞—Å–∞–Ω–∏—è - —Ü–µ–Ω—Ç—Ä
        needleSprite.anchor.set(needleConfig.touchOffset.x, needleConfig.touchOffset.y);
        needleSprite.x = x;
        needleSprite.y = y;
        needleBaseY = y;
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã
function animateNeedlePress(pressed) {
    const needleSprite = window.needle;
    if (!needleSprite) return;
    
    const pressConfig = CONFIG.needle.pressAnimation;
    needlePressed = pressed;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (needleSprite.pressAnimation) {
        cancelAnimationFrame(needleSprite.pressAnimation);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    const targetY = pressed ? needleBaseY + pressConfig.offsetY : needleBaseY;
    const duration = pressConfig.duration * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    
    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ requestAnimationFrame
    const startY = needleSprite.y;
    const deltaY = targetY - startY;
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        needleSprite.y = startY + deltaY * easeProgress;
        
        if (progress < 1) {
            needleSprite.pressAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.pressAnimation = null;
        }
    }
    
    needleSprite.pressAnimation = requestAnimationFrame(animate);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥–ª—ã –∫ –∫–∞—Å–∞–Ω–∏—é (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
function animateNeedleToTouch(targetX, targetY) {
    const needleSprite = window.needle;
    if (!needleSprite) return;
    
    const duration = CONFIG.needle.mobile.animationDuration * 1000;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (needleSprite.moveAnimation) {
        cancelAnimationFrame(needleSprite.moveAnimation);
    }
    
    const startX = needleSprite.x;
    const startY = needleSprite.y;
    const deltaX = targetX - startX;
    const deltaY = targetY - startY;
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        needleSprite.x = startX + deltaX * easeProgress;
        needleSprite.y = startY + deltaY * easeProgress;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
        needleBaseY = needleSprite.y;
        
        if (progress < 1) {
            needleSprite.moveAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.moveAnimation = null;
        }
    }
    
    needleSprite.moveAnimation = requestAnimationFrame(animate);
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
function interpolateColor(colorFrom, colorTo, factor) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ hex —Ü–≤–µ—Ç–æ–≤
    const rFrom = (colorFrom >> 16) & 0xFF;
    const gFrom = (colorFrom >> 8) & 0xFF;
    const bFrom = colorFrom & 0xFF;
    
    const rTo = (colorTo >> 16) & 0xFF;
    const gTo = (colorTo >> 8) & 0xFF;
    const bTo = colorTo & 0xFF;
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const r = Math.round(rFrom + (rTo - rFrom) * factor);
    const g = Math.round(gFrom + (gTo - gFrom) * factor);
    const b = Math.round(bFrom + (bTo - bFrom) * factor);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
    return (r << 16) | (g << 8) | b;
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏
function startPulseAnimation(app) {
    function animate() {
        const centerShapeContainer = window.centerShape;
        
        if (centerShapeContainer && centerShapeContainer.pulseShape && CONFIG.centerShape.pulse.enabled) {
            const currentTime = Date.now();
            const elapsed = (currentTime - centerShapeContainer.pulseStartTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const pulseConfig = CONFIG.centerShape.pulse;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—É—Å–æ–∏–¥—ã
            const phase = elapsed * pulseConfig.speed * 2 * Math.PI;
            const normalizedSin = (Math.sin(phase) + 1) / 2; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
            const currentColor = interpolateColor(pulseConfig.colorFrom, pulseConfig.colorTo, normalizedSin);
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ñ–æ—Ä–º—É —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
            const pulseShape = centerShapeContainer.pulseShape;
            if (pulseShape) {
                pulseShape.clear();
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã
                const shapeSize = centerShapeContainer.cookieSize * CONFIG.centerShape.sizePercent;
                const pulseConfigUpdated = {
                    form: CONFIG.centerShape.form,
                    size: shapeSize,
                    color: currentColor,
                    lineWidth: pulseConfig.lineWidth,
                    alpha: pulseConfig.alpha,
                    dashed: pulseConfig.dashed,
                    dashLength: pulseConfig.dashLength,
                    gapLength: pulseConfig.gapLength,
                    borderRadius: CONFIG.centerShape.borderRadius
                };
                
                drawCenterShape(pulseShape, 0, 0, pulseConfigUpdated);
            }
        }
        
        requestAnimationFrame(animate);
    }
    
    animate();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp().catch(console.error);