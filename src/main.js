import { Application, Assets, Sprite, Graphics, Texture, BlurFilter, Container } from 'pixi.js';
import { CONFIG } from './config.js';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDev = import.meta.env.DEV;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                 ('ontouchstart' in window) || 
                 (navigator.maxTouchPoints > 0) ||
                 (window.matchMedia && window.matchMedia("(pointer: coarse)").matches);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥–ª—ã
let needleBaseY = 0; // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
let needlePressed = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
let currentClickPoint = { x: 0, y: 0 }; // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –∫–ª–∏–∫–∞/–∫–∞—Å–∞–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–æ–ª–æ–≤
let chipsContainer = null; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –æ—Å–∫–æ–ª–∫–æ–≤
let activeChips = []; // –ú–∞—Å—Å–∏–≤ –ø–∞–¥–∞—é—â–∏—Ö –æ—Å–∫–æ–ª–∫–æ–≤


// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º dev —Ä–µ–∂–∏–º –≤ HTML
if (isDev) {
    document.body.classList.add('dev-mode');
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
if (isDev) {
    console.log('üîç User Agent:', navigator.userAgent);
    console.log('üîç ontouchstart in window:', 'ontouchstart' in window);
    console.log('üîç maxTouchPoints:', navigator.maxTouchPoints);
    console.log('üîç pointer: coarse:', window.matchMedia && window.matchMedia("(pointer: coarse)").matches);
    console.log('üì± isMobile:', isMobile);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function createDebugInfo() {
    const debugDiv = document.createElement('div');
    debugDiv.id = 'debug-info';
    debugDiv.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 10px;
        font-family: monospace;
        font-size: 12px;
        z-index: 9999;
        max-width: 300px;
        white-space: pre-wrap;
    `;
    
    const debugInfo = [
        `isMobile: ${isMobile}`,
        `ontouchstart: ${'ontouchstart' in window}`,
        `maxTouchPoints: ${navigator.maxTouchPoints}`,
        `pointer: coarse: ${window.matchMedia && window.matchMedia("(pointer: coarse)").matches}`,
        `User Agent: ${navigator.userAgent.substring(0, 50)}...`
    ].join('\n');
    
    debugDiv.textContent = debugInfo;
    document.body.appendChild(debugDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (debugDiv.parentNode) {
            debugDiv.parentNode.removeChild(debugDiv);
        }
    }, 10000);
}

// –ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å–∞–Ω–∏—è—Ö
function showTouchDebug(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
    if (!isDev) return;
    
    let touchDebugDiv = document.getElementById('touch-debug');
    
    if (!touchDebugDiv) {
        touchDebugDiv = document.createElement('div');
        touchDebugDiv.id = 'touch-debug';
        touchDebugDiv.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255,0,0,0.8);
            color: white;
            padding: 10px;
            font-family: monospace;
            font-size: 14px;
            z-index: 9999;
            max-width: 200px;
            white-space: pre-wrap;
        `;
        document.body.appendChild(touchDebugDiv);
    }
    
    touchDebugDiv.textContent = message;
    
    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (touchDebugDiv.parentNode) {
            touchDebugDiv.style.opacity = '0.5';
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    const canvas = document.getElementById('game-canvas');
    const gameArea = document.querySelector('.game-area');
    
    // –°–æ–∑–¥–∞–µ–º PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const app = new Application();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await app.init({
        canvas: canvas,
        width: gameArea.clientWidth,
        height: gameArea.clientHeight,
        backgroundColor: CONFIG.pixi.backgroundColor,
        backgroundAlpha: CONFIG.pixi.backgroundAlpha,
        resizeTo: gameArea
    });
    
    // Dev –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isDev) {
        console.log('üéÆ Cookindle App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìê –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        console.log('üñ•Ô∏è PixiJS –≤–µ—Ä—Å–∏—è:', app.renderer.type);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        if (isDev) {
            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
        updateCookieSize();
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (isDev) {
        window.app = app;
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    await initGame(app);
    
    return app;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö —Ñ–æ–Ω–æ–≤ –¥–ª—è CSS —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function makeBackgroundsTransparent() {
    // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ —Ñ–æ–Ω —É html –∏ body
    document.documentElement.style.cssText = `
        margin: 0;
        padding: 0;
        background: transparent;
    `;
    
    document.body.style.cssText = `
        margin: 0;
        padding: 0;
        background: transparent;
    `;
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω —É layout
    const layout = document.querySelector('.layout');
    if (layout) {
        layout.style.backgroundColor = 'transparent';
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω —É game-area
    const gameArea = document.querySelector('.game-area');
    if (gameArea) {
        gameArea.style.backgroundColor = 'transparent';
    }
    
    if (isDev) {
        console.log('üîç CSS —Ñ–æ–Ω—ã —Å–¥–µ–ª–∞–Ω—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, –æ—Ç—Å—Ç—É–ø—ã —É–±—Ä–∞–Ω—ã');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initGame(app) {
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await loadAssets();
        
        // –î–µ–ª–∞–µ–º CSS —Ñ–æ–Ω—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
        makeBackgroundsTransparent();
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        createBackground(app);
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        createCookie(app);
        
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∏–≥–ª—É
        await loadNeedleTexture();
        createNeedle(app);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        setupInteractivity(app);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        startPulseAnimation(app);
        
        if (isDev) {
            console.log('üç™ –ü–µ—á–µ–Ω—å–µ —Å–æ–∑–¥–∞–Ω–æ');
            console.log('ü™° –ò–≥–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadAssets() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const bgImageUrl = (await import('./assets/textures/bg.png')).default;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        const cookieImageUrl = (await import('./assets/textures/bg_cooke.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é');
            console.log('üìÅ URL —Ñ–æ–Ω–∞:', bgImageUrl);
            console.log('üìÅ URL –ø–µ—á–µ–Ω—å—è:', cookieImageUrl);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
        if (bgImageUrl) {
            const bgImg = new Image();
            const bgLoaded = new Promise((resolve, reject) => {
                bgImg.onload = () => resolve(bgImg);
                bgImg.onerror = reject;
            });
            bgImg.src = bgImageUrl;
            await bgLoaded;
            
            const bgTexture = Texture.from(bgImg);
            Assets.cache.set('background', bgTexture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ —Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', bgTexture.width, 'x', bgTexture.height);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        if (cookieImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = cookieImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', error);
        
        // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ public –ø–∞–ø–∫—É
        try {
            const publicUrl = '/assets/textures/bg_cooke.png';
            
            if (isDev) {
                console.log('üîç –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public –ø–∞–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é');
                console.log('üìÅ URL –∏–∑ public:', publicUrl);
            }
            
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = publicUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ public –ø–∞–ø–∫–∏');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
            
        } catch (publicError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public:', publicError);
            
            // –°–ø–æ—Å–æ–± 3: Fallback - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (isDev) {
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É');
            }
            createPixiTexture();
        }
    }
}


// –†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∑–æ—Ä–æ–≤ –Ω–∞ –ø–µ—á–µ–Ω—å–µ
function drawCookiePatterns(graphics, paintingType) {
    const patternConfig = CONFIG.cookie;
    
    for (let i = 0; i < patternConfig.patternCount; i++) {
        const angle = (i / patternConfig.patternCount) * Math.PI * 2;
        const radius = 60 + Math.random() * 80;
        const x = 200 + Math.cos(angle) * radius + (Math.random() - 0.5) * 40;
        const y = 200 + Math.sin(angle) * radius + (Math.random() - 0.5) * 40;
        const size = patternConfig.patternSize.min + Math.random() * (patternConfig.patternSize.max - patternConfig.patternSize.min);
        
        // –†–∏—Å—É–µ–º —É–∑–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (paintingType) {
            case "circle":
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "star":
                drawStarPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "cross":
                drawCrossPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            default:
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–≥–æ —É–∑–æ—Ä–∞
function drawCirclePattern(graphics, x, y, size, color) {
    graphics.circle(x, y, size);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥—á–∞—Ç–æ–≥–æ —É–∑–æ—Ä–∞
function drawStarPattern(graphics, x, y, size, color) {
    const points = 5;
    const outerRadius = size;
    const innerRadius = size * 0.4;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—É
    graphics.moveTo(x, y - outerRadius);
    
    for (let i = 0; i < points * 2; i++) {
        const angle = (i * Math.PI) / points;
        const radius = i % 2 === 0 ? outerRadius : innerRadius;
        const px = x + Math.cos(angle - Math.PI / 2) * radius;
        const py = y + Math.sin(angle - Math.PI / 2) * radius;
        graphics.lineTo(px, py);
    }
    
    graphics.closePath();
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä–µ—Å—Ç–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —É–∑–æ—Ä–∞
function drawCrossPattern(graphics, x, y, size, color) {
    const thickness = size * 0.3;
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - thickness / 2, y - size, thickness, size * 2);
    graphics.fill(color);
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - size, y - thickness / 2, size * 2, thickness);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function drawCenterShape(graphics, x, y, shapeConfig) {
    const { form, size, color, lineWidth, alpha, dashed, dashLength, gapLength } = shapeConfig;
    
    
    const halfSize = size / 2;
    
    // –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (dashed && dashLength && gapLength) {
        switch (form) {
            case 1: // –ö—Ä—É–≥
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            default:
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
        }
    } else {
        // –û–±—ã—á–Ω–∞—è —Å–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è
        switch (form) {
            case 1: // –ö—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                graphics.rect(x - halfSize, y - halfSize, size, size);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawTriangleShape(graphics, x, y, size);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            default:
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawTriangleShape(graphics, x, y, size) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ –µ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É
    const centroidOffsetY = height / 3; // –¶–µ–Ω—Ç—Ä–æ–∏–¥ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    
    // –†–∏—Å—É–µ–º —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ (x, y)
    graphics.moveTo(x, y - (height - centroidOffsetY));           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x + halfBase, y + centroidOffsetY);           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x - halfBase, y + centroidOffsetY);           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.closePath();
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
function drawDashedCircle(graphics, x, y, radius, dashLength, gapLength, color, lineWidth, alpha) {
    
    const circumference = 2 * Math.PI * radius;
    const totalDashLength = dashLength + gapLength;
    const numDashes = Math.floor(circumference / totalDashLength);
    
    for (let i = 0; i < numDashes; i++) {
        const startAngle = (i * totalDashLength / radius);
        const endAngle = startAngle + (dashLength / radius);
        
        const startX = x + Math.cos(startAngle) * radius;
        const startY = y + Math.sin(startAngle) * radius;
        const endX = x + Math.cos(endAngle) * radius;
        const endY = y + Math.sin(endAngle) * radius;
        
        graphics.moveTo(startX, startY);
        graphics.lineTo(endX, endY);
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
function drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const halfSize = size / 2;
    const sides = [
        [{x: x - halfSize, y: y - halfSize}, {x: x + halfSize, y: y - halfSize}], // –í–µ—Ä—Ö
        [{x: x + halfSize, y: y - halfSize}, {x: x + halfSize, y: y + halfSize}], // –ü—Ä–∞–≤–æ
        [{x: x + halfSize, y: y + halfSize}, {x: x - halfSize, y: y + halfSize}], // –ù–∏–∑
        [{x: x - halfSize, y: y + halfSize}, {x: x - halfSize, y: y - halfSize}]  // –õ–µ–≤–æ
    ];
    
    sides.forEach(side => {
        const start = side[0];
        const end = side[1];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let i = 0; i < numDashes; i++) {
            const t1 = (i * totalDashLength) / length;
            const t2 = ((i * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    });
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    const points = [
        {x: x, y: y - (height - centroidOffsetY)},           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        {x: x + halfBase, y: y + centroidOffsetY},           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        {x: x - halfBase, y: y + centroidOffsetY},           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ];
    
    for (let i = 0; i < 3; i++) {
        const start = points[i];
        const end = points[(i + 1) % 3];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let j = 0; j < numDashes; j++) {
            const t1 = (j * totalDashLength) / length;
            const t2 = ((j * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–≤–æ–¥–∫–æ–π
function createCenterShapeWithPulse(x, y, cookieSize) {
    const container = new Graphics();
    const shapeSize = cookieSize * CONFIG.centerShape.sizePercent;
    const shapeConfig = { ...CONFIG.centerShape, size: shapeSize };
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É
    const mainShape = new Graphics();
    drawCenterShape(mainShape, 0, 0, shapeConfig);
    container.addChild(mainShape);
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é –æ–±–≤–æ–¥–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (CONFIG.centerShape.pulse.enabled) {
        const pulseShape = new Graphics();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ —Ñ–æ—Ä–º—É, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const pulseConfig = {
            ...shapeConfig,
            color: CONFIG.centerShape.pulse.colorFrom,
            lineWidth: CONFIG.centerShape.pulse.lineWidth,
            alpha: CONFIG.centerShape.pulse.alpha,
            dashed: CONFIG.centerShape.pulse.dashed,
            dashLength: CONFIG.centerShape.pulse.dashLength,
            gapLength: CONFIG.centerShape.pulse.gapLength
        };
        
        drawCenterShape(pulseShape, 0, 0, pulseConfig);
        container.addChild(pulseShape);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        container.pulseShape = pulseShape;
        container.pulseStartTime = Date.now();
        container.cookieSize = cookieSize;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container.x = x;
    container.y = y;
    
    return container;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —á–µ—Ä–µ–∑ PixiJS Graphics
function createPixiTexture() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º PixiJS —Ç–µ–∫—Å—Ç—É—Ä—É –ø–µ—á–µ–Ω—å—è');
        console.log('üé® –£–∑–æ—Ä –Ω–∞ –ø–µ—á–µ–Ω—å–µ:', CONFIG.cookie.painting);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤—É –ø–µ—á–µ–Ω—å—è (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PixiJS v8)
    graphics.circle(200, 200, 180);
    graphics.fill(0xD2691E); // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–æ—Ä—ã –Ω–∞ –ø–µ—á–µ–Ω—å–µ
    drawCookiePatterns(graphics, CONFIG.cookie.painting);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    drawCenterShape(graphics, 200, 200, CONFIG.centerShape);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const app = window.app; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à Assets
    Assets.cache.set('cookie', texture);
    
    if (isDev) {
        console.log('‚úÖ PixiJS —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø–µ—á–µ–Ω—å—è —Å–æ–∑–¥–∞–Ω–∞');
        console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã: 400x400px');
    }
}

// –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function createBackground(app) {
    const backgroundTexture = Assets.get('background');
    if (!backgroundTexture) return;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –∫–∞–∫ CSS —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const bgElement = document.createElement('div');
    bgElement.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('${backgroundTexture.source.resource.src}');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -1000;
        pointer-events: none;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ body (–Ω–µ –≤ gameArea!)
    document.body.appendChild(bgElement);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    window.background = bgElement;
    
    if (isDev) {
        console.log('üñºÔ∏è –§–æ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω:', window.innerWidth, 'x', window.innerHeight);
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
function createCookie(app) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
    const cookieTexture = Assets.get('cookie');
    const cookieSprite = new Sprite(cookieTexture);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    cookieSprite.anchor.set(0.5); // –¶–µ–Ω—Ç—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    app.stage.addChild(cookieSprite);
    
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ–≤–µ—Ä—Ö –ø–µ—á–µ–Ω—å—è
    const centerShapeContainer = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize);
    app.stage.addChild(centerShapeContainer);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    window.cookie = cookieSprite;
    window.centerShape = centerShapeContainer;
    
    // –†–∏—Å—É–µ–º –±–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –ø–µ—á–µ–Ω—å—è
    const hexGraphics = drawBigHexagon(app, cookieSprite);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    window.bigHexagon = hexGraphics;
    
    if (isDev) {
        console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è:', cookieSize);
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
    }
    
    return cookieSprite;
}

// ========================
// –°–ò–°–¢–ï–ú–ê –®–ï–°–¢–ò–£–ì–û–õ–¨–ù–ò–ö–û–í
// ========================

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–æ–∫—Ä—É–≥ –ø–µ—á–µ–Ω—å—è
function drawBigHexagon(app, cookieSprite) {
    const cookieRadius = cookieSprite.width / 2;
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    
    // –†–∞–¥–∏—É—Å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ = —Ä–∞–¥–∏—É—Å –≤–ø–∏—Å–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ / cos(30¬∞)
    const bigHexRadius = cookieRadius / Math.cos(Math.PI / 6);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const hexGraphics = new Graphics();
    
    // –†–∏—Å—É–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
    const vertices = [];
    for (let i = 0; i < 6; i++) {
        const angle = (i * Math.PI) / 3; // 60 –≥—Ä–∞–¥—É—Å–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏
        const x = centerX + Math.cos(angle) * bigHexRadius;
        const y = centerY + Math.sin(angle) * bigHexRadius;
        vertices.push(x, y);
    }
    
    hexGraphics.poly(vertices);
    hexGraphics.stroke({ color: 0xFF0000, width: 3, alpha: 0.8 });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    app.stage.addChild(hexGraphics);
    
    if (isDev) {
        console.log(`üî∑ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω –±–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–¥–∏—É—Å–∞ ${bigHexRadius.toFixed(1)}`);
        console.log(`üç™ –ü–µ—á–µ–Ω—å–∫–∞ —Ä–∞–¥–∏—É—Å–∞ ${cookieRadius.toFixed(1)} –≤–ø–∏—Å–∞–Ω–∞ –≤ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫`);
    }
    
    return hexGraphics;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateCookieSize() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–µ—à–∞
    const cookieSprite = window.cookie;
    const centerShapeGraphics = window.centerShape;
    const backgroundSprite = window.background;
    if (!cookieSprite) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ (CSS —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è)
    if (window.background && isDev) {
        console.log('üñºÔ∏è –§–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞');
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    const centerShapeContainer = window.centerShape;
    if (centerShapeContainer) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        centerShapeContainer.parent?.removeChild(centerShapeContainer);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newCenterShape = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize);
        window.app.stage.addChild(newCenterShape);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.centerShape = newCenterShape;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
    const bigHexagon = window.bigHexagon;
    if (bigHexagon) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
        bigHexagon.parent?.removeChild(bigHexagon);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newHexagon = drawBigHexagon(window.app, cookieSprite);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.bigHexagon = newHexagon;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã
    updateNeedleSize();
    
    
    console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –æ–±–Ω–æ–≤–ª–µ–Ω:', cookieSize);
    console.log('üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateNeedleSize() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏–≥–ª—ã
    const needleTexture = needleSprite.texture;
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    needleSprite.scale.set(scale);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Ç–µ–Ω–∏
    if (needleShadowSprite) {
        const shadowTexture = needleShadowSprite.texture;
        const shadowScale = needleSize / Math.max(shadowTexture.width, shadowTexture.height);
        needleShadowSprite.scale.set(shadowScale);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        needleSprite.y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        needleBaseY = needleSprite.y;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏
        if (needleShadowSprite) {
            const x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
            const y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
            updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, x, y, false);
        }
    }
    
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω:', needleSize, 'scale:', scale);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã
async function loadNeedleTexture() {
    try {
        // –°–ø–æ—Å–æ–± 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import
        const needleImageUrl = (await import('./assets/textures/needle.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', needleImageUrl);
        }
        
        if (needleImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = needleImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('needle', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∏–≥–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', texture.width, 'x', texture.height);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–Ω—å –∏–≥–ª—ã
            await loadNeedleShadowTexture();
            return;
        }
        
        throw new Error('Import –∏–≥–ª—ã –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã:', error);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        createProgrammaticNeedle();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã
async function loadNeedleShadowTexture() {
    try {
        // –°–ø–æ—Å–æ–± 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import
        const needleShadowImageUrl = (await import('./assets/textures/needle_shadow.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–µ–Ω–∏ –∏–≥–ª—ã');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã:', needleShadowImageUrl);
        }
        
        if (needleShadowImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = needleShadowImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('needleShadow', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ —Ç–µ–Ω–∏ –∏–≥–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import —Ç–µ–Ω–∏ –∏–≥–ª—ã –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–µ–Ω–∏ –∏–≥–ª—ã:', error);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–Ω—å –∫–∞–∫ fallback
        createProgrammaticNeedleShadow();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–≥–ª—ã –∫–∞–∫ fallback
function createProgrammaticNeedle() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∏–≥–ª—É');
    }
    
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É
    // –û—Å—Ç—Ä–∏–µ
    graphics.moveTo(0, 0);
    graphics.lineTo(3, 10);
    graphics.lineTo(-3, 10);
    graphics.closePath();
    graphics.fill(0x888888);
    
    // –°—Ç–µ—Ä–∂–µ–Ω—å
    graphics.rect(-1, 10, 2, 20);
    graphics.fill(0x888888);
    
    // –£—à–∫–æ
    graphics.circle(0, 32, 3);
    graphics.stroke({ color: 0x888888, width: 1 });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    const app = window.app;
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
    Assets.cache.set('needle', texture);
    
    if (isDev) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–≥–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ç–µ–Ω–∏ –∏–≥–ª—ã –∫–∞–∫ fallback
function createProgrammaticNeedleShadow() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–Ω—å –∏–≥–ª—ã');
    }
    
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º —Ç–µ–Ω—å –∏–≥–ª—ã (–±–æ–ª–µ–µ —Ç–µ–º–Ω–∞—è –∏ —Ä–∞–∑–º—ã—Ç–∞—è –≤–µ—Ä—Å–∏—è)
    // –û—Å—Ç—Ä–∏–µ
    graphics.moveTo(2, 2); // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–µ–Ω–∏
    graphics.lineTo(5, 12);
    graphics.lineTo(-1, 12);
    graphics.closePath();
    graphics.fill(0x333333); // –¢–µ–º–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥–ª—ã
    
    // –°—Ç–µ—Ä–∂–µ–Ω—å
    graphics.rect(1, 12, 2, 20);
    graphics.fill(0x333333);
    
    // –£—à–∫–æ
    graphics.circle(2, 34, 3);
    graphics.stroke({ color: 0x333333, width: 1 });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    const app = window.app;
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
    Assets.cache.set('needleShadow', texture);
    
    if (isDev) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ç–µ–Ω—å –∏–≥–ª—ã —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
function calculateNeedlePosition(clickX, clickY, pressed = false) {
    const distance = CONFIG.needle.shadow.distance;
    
    if (pressed) {
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–≥–ª–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
        return {
            x: clickX,
            y: clickY // –ò–≥–ª–∞ —Ç–æ—á–Ω–æ –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
        };
    } else {
        // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ - –∏–≥–ª–∞ —Å–º–µ—â–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ Y
        return {
            x: clickX,
            y: clickY - distance // –ò–≥–ª–∞ –≤—ã—à–µ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
function calculateShadowPosition(clickX, clickY, pressed = false) {
    const distance = CONFIG.needle.shadow.distance;
    
    if (pressed) {
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Ç–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
        return {
            x: clickX,
            y: clickY // –¢–µ–Ω—å —Ç–æ—á–Ω–æ –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
        };
    } else {
        // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ - —Ç–µ–Ω—å —Å–º–µ—â–µ–Ω–∞ –ø–æ X –∏ Y
        return {
            x: clickX + distance, // –¢–µ–Ω—å –ø—Ä–∞–≤–µ–µ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
            y: clickY - distance  // –¢–µ–Ω—å –≤—ã—à–µ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
function updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, clickX, clickY, pressed = false) {
    if (!needleSprite) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∫–ª–∏–∫–∞
    currentClickPoint.x = clickX;
    currentClickPoint.y = clickY;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã
    const needlePos = calculateNeedlePosition(clickX, clickY, pressed);
    needleSprite.x = needlePos.x;
    needleSprite.y = needlePos.y;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏
    if (needleShadowSprite) {
        const shadowPos = calculateShadowPosition(clickX, clickY, pressed);
        needleShadowSprite.x = shadowPos.x;
        needleShadowSprite.y = shadowPos.y;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y
    needleBaseY = needlePos.y;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function createDebugPoint() {
    const graphics = new Graphics();
    graphics.circle(0, 0, 1); // –†–∞–¥–∏—É—Å 1px
    graphics.fill(0xFF0000); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
    graphics.zIndex = 2000; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
    graphics.visible = false; // –°–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    return graphics;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ—á–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function showDebugPoint(x, y) {
    if (!isDev) return; // –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    let debugPoint = window.debugPoint;
    if (!debugPoint) {
        debugPoint = createDebugPoint();
        window.app.stage.addChild(debugPoint);
        window.debugPoint = debugPoint;
    }
    
    debugPoint.x = x;
    debugPoint.y = y;
    debugPoint.visible = true;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (debugPoint) {
            debugPoint.visible = false;
        }
    }, 2000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ –∏–≥–ª—ã
function createNeedle(app) {
    const needleTexture = Assets.get('needle');
    const needleShadowTexture = Assets.get('needleShadow');
    const needleSprite = new Sprite(needleTexture);
    const needleShadowSprite = new Sprite(needleShadowTexture);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥–ª—ã
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    needleSprite.scale.set(scale);
    needleSprite.zIndex = 1000; // –ò–≥–ª–∞ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–∏ –∏–≥–ª—ã
    const shadowScale = needleSize / Math.max(needleShadowTexture.width, needleShadowTexture.height);
    needleShadowSprite.scale.set(shadowScale);
    needleShadowSprite.zIndex = 999; // –¢–µ–Ω—å –ø–æ–¥ –∏–≥–ª–æ–π
    needleShadowSprite.alpha = CONFIG.needle.shadow.alpha; // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.visible = true;
        needleShadowSprite.visible = true;
        needleSprite.anchor.set(CONFIG.needle.mouseOffset.x, CONFIG.needle.mouseOffset.y); // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        needleShadowSprite.anchor.set(CONFIG.needle.mouseOffset.x, CONFIG.needle.mouseOffset.y);
        
        const startX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        const startY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        
        needleSprite.x = startX;
        needleSprite.y = startY;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, startX, startY, false);
        
        needleBaseY = needleSprite.y;
    } else {
        needleSprite.visible = CONFIG.needle.visible;
        needleShadowSprite.visible = CONFIG.needle.visible;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ–Ω—å, –ø–æ—Ç–æ–º –∏–≥–ª—É)
    app.stage.addChild(needleShadowSprite);
    app.stage.addChild(needleSprite);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    window.needle = needleSprite;
    window.needleShadow = needleShadowSprite;
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã:', needleSize, 'scale:', scale);
    console.log('üåë –¢–µ–Ω—å –∏–≥–ª—ã —Å–æ–∑–¥–∞–Ω–∞');
    console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobile);
    
    return needleSprite;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function setupInteractivity(app) {
    const gameArea = document.querySelector('.game-area');
    const needleSprite = window.needle;
    
    if (!needleSprite) {
        console.error('‚ùå –°–ø—Ä–∞–π—Ç –∏–≥–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    showTouchDebug(`SETUP: ${isMobile ? 'MOBILE' : 'DESKTOP'}`);
    
    if (isMobile) {
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        setupMobileInteractivity(gameArea);
    } else {
        // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ª–æ–≥–∏–∫–∞ —Å –º—ã—à—å—é
        setupDesktopInteractivity(gameArea);
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    gameArea.addEventListener('click', (event) => {
        showTouchDebug('UNIVERSAL CLICK');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        showTouchDebug(`CLICK: ${x.toFixed(0)}, ${y.toFixed(0)}`);
        
        if (isMobile) {
            animateNeedleToTouch(x, y);
            animateNeedlePress(true);
            
            setTimeout(() => {
                animateNeedlePress(false);
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }, 300);
        }
    });
    
    console.log('üñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è', isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
function setupDesktopInteractivity(gameArea) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousemove', (event) => {
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        updateNeedlePosition(x, y, 'mouse');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –º—ã—à–∏ –≤ –æ–±–ª–∞—Å—Ç—å
    gameArea.addEventListener('mouseenter', () => {
        showNeedle();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
    gameArea.addEventListener('mouseleave', () => {
        hideNeedle();
        animateNeedlePress(false); // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousedown', (event) => {
        event.preventDefault();
        animateNeedlePress(true);
    });
    
    gameArea.addEventListener('mouseup', () => {
        animateNeedlePress(false);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function setupMobileInteractivity(gameArea) {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    showTouchDebug('SETUP MOBILE');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const canvas = document.getElementById('game-canvas');
    const elements = [gameArea, canvas, document.body, window];
    
    elements.forEach((element, index) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π
        element.addEventListener('touchstart', (event) => {
            showTouchDebug(`TOUCH START ${index}`);
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è gameArea –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (element === gameArea) {
                event.preventDefault();
                const touch = event.touches[0];
                const rect = gameArea.getBoundingClientRect();
                const x = touch.clientX - rect.left;
                const y = touch.clientY - rect.top;
                
                showTouchDebug(`TOUCH: ${x.toFixed(0)}, ${y.toFixed(0)}`);
                
                // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥–ª—ã –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
                animateNeedleToTouch(x, y);
                
                // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                setTimeout(() => {
                    animateNeedlePress(true);
                }, CONFIG.needle.mobile.animationDuration * 1000);
            }
        }, { passive: false });
        
        element.addEventListener('touchend', (event) => {
            showTouchDebug(`TOUCH END ${index}`);
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è gameArea –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (element === gameArea) {
                // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É
                animateNeedlePress(false);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥–ª—É –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }
        }, { passive: false });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º pointer events –∫–∞–∫ fallback
    gameArea.addEventListener('pointerdown', (event) => {
        showTouchDebug('POINTER DOWN');
        
        if (event.pointerType === 'touch') {
            const rect = gameArea.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥–ª—É –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
            animateNeedleToTouch(x, y);
            
            // –ó–∞—Ç–µ–º –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            setTimeout(() => {
                animateNeedlePress(true);
            }, CONFIG.needle.mobile.animationDuration * 1000);
        }
    });
    
    gameArea.addEventListener('pointerup', (event) => {
        showTouchDebug('POINTER UP');
        
        if (event.pointerType === 'touch') {
            animateNeedlePress(false);
            
            setTimeout(() => {
                const gameWidth = gameArea.clientWidth;
                const gameHeight = gameArea.clientHeight;
                const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                animateNeedleToTouch(staticX, staticY);
            }, 200);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ click –∫–∞–∫ –µ—â–µ –æ–¥–∏–Ω fallback
    gameArea.addEventListener('click', (event) => {
        showTouchDebug('CLICK EVENT');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥–ª—É –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
        animateNeedleToTouch(x, y);
        
        // –ó–∞—Ç–µ–º –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        setTimeout(() => {
            animateNeedlePress(true);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
                animateNeedlePress(false);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥–ª—É –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }, 300);
        }, CONFIG.needle.mobile.animationDuration * 1000); // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mousedown/mouseup –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–∞–∫ fallback
    gameArea.addEventListener('mousedown', (event) => {
        showTouchDebug('MOUSEDOWN EVENT');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥–ª—É –∫ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
        animateNeedleToTouch(x, y);
        
        // –ó–∞—Ç–µ–º –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        setTimeout(() => {
            animateNeedlePress(true);
        }, CONFIG.needle.mobile.animationDuration * 1000);
    });
    
    gameArea.addEventListener('mouseup', (event) => {
        showTouchDebug('MOUSEUP EVENT');
        
        animateNeedlePress(false);
        
        setTimeout(() => {
            const gameWidth = gameArea.clientWidth;
            const gameHeight = gameArea.clientHeight;
            const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
            const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
            animateNeedleToTouch(staticX, staticY);
        }, 200);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥–ª—É
function showNeedle() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    
    if (needleSprite) {
        needleSprite.visible = true;
        
        if (needleShadowSprite) {
            needleShadowSprite.visible = true;
        }
        
        if (isDev) {
            console.log('üëÅÔ∏è –ò–≥–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
    }
}

// –°–∫—Ä—ã—Ç—å –∏–≥–ª—É
function hideNeedle() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    
    if (needleSprite) {
        needleSprite.visible = false;
        
        if (needleShadowSprite) {
            needleShadowSprite.visible = false;
        }
        
        if (isDev) {
            console.log('üôà –ò–≥–ª–∞ —Å–∫—Ä—ã—Ç–∞');
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã
function updateNeedlePosition(x, y, inputType) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    showDebugPoint(x, y);
    
    const needleConfig = CONFIG.needle;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    if (inputType === 'mouse') {
        needleSprite.anchor.set(needleConfig.mouseOffset.x, needleConfig.mouseOffset.y);
        if (needleShadowSprite) {
            needleShadowSprite.anchor.set(needleConfig.mouseOffset.x, needleConfig.mouseOffset.y);
        }
    } else if (inputType === 'touch') {
        needleSprite.anchor.set(needleConfig.touchOffset.x, needleConfig.touchOffset.y);
        if (needleShadowSprite) {
            needleShadowSprite.anchor.set(needleConfig.touchOffset.x, needleConfig.touchOffset.y);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
    updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, x, y, false);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
function isPointInsideCookie(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    const distance = Math.sqrt(
        Math.pow(x - cookieCenterX, 2) + 
        Math.pow(y - cookieCenterY, 2)
    );
    
    return distance <= cookieRadius;
}

// –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã
function animateNeedlePress(pressed) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    const shadowConfig = CONFIG.needle.shadow;
    needlePressed = pressed;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
    if (pressed) {
        const insideCookie = isPointInsideCookie(currentClickPoint.x, currentClickPoint.y);
        if (isDev) {
            console.log(`üéØ –ö–ª–∏–∫ –≤ —Ç–æ—á–∫–µ (${currentClickPoint.x.toFixed(1)}, ${currentClickPoint.y.toFixed(1)}), –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏: ${insideCookie}`);
        }
        
        if (insideCookie) {
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
            if (isDev) {
                console.log(`üî® –ö–ª–∏–∫ –∏–≥–ª–æ–π –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏ –≤ —Ç–æ—á–∫–µ (${currentClickPoint.x.toFixed(1)}, ${currentClickPoint.y.toFixed(1)})`);
            }
        }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (needleSprite.pressAnimation) {
        cancelAnimationFrame(needleSprite.pressAnimation);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏
    const needleStartPos = { x: needleSprite.x, y: needleSprite.y };
    const shadowStartPos = needleShadowSprite ? { x: needleShadowSprite.x, y: needleShadowSprite.y } : { x: 0, y: 0 };
    
    const needleTargetPos = calculateNeedlePosition(currentClickPoint.x, currentClickPoint.y, pressed);
    const shadowTargetPos = calculateShadowPosition(currentClickPoint.x, currentClickPoint.y, pressed);
    
    const duration = shadowConfig.animationDuration * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–≥–ª—É
        needleSprite.x = needleStartPos.x + (needleTargetPos.x - needleStartPos.x) * easeProgress;
        needleSprite.y = needleStartPos.y + (needleTargetPos.y - needleStartPos.y) * easeProgress;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–Ω—å
        if (needleShadowSprite) {
            needleShadowSprite.x = shadowStartPos.x + (shadowTargetPos.x - shadowStartPos.x) * easeProgress;
            needleShadowSprite.y = shadowStartPos.y + (shadowTargetPos.y - shadowStartPos.y) * easeProgress;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y
        needleBaseY = needleSprite.y;
        
        if (progress < 1) {
            needleSprite.pressAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.pressAnimation = null;
        }
    }
    
    needleSprite.pressAnimation = requestAnimationFrame(animate);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥–ª—ã –∫ –∫–∞—Å–∞–Ω–∏—é (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
function animateNeedleToTouch(targetX, targetY) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    showDebugPoint(targetX, targetY);
    
    const duration = CONFIG.needle.mobile.animationDuration * 1000;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (needleSprite.moveAnimation) {
        cancelAnimationFrame(needleSprite.moveAnimation);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
    const needleStartPos = { x: needleSprite.x, y: needleSprite.y };
    const shadowStartPos = needleShadowSprite ? { x: needleShadowSprite.x, y: needleShadowSprite.y } : { x: 0, y: 0 };
    
    const needleTargetPos = calculateNeedlePosition(targetX, targetY, false);
    const shadowTargetPos = calculateShadowPosition(targetX, targetY, false);
    
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–≥–ª—É
        needleSprite.x = needleStartPos.x + (needleTargetPos.x - needleStartPos.x) * easeProgress;
        needleSprite.y = needleStartPos.y + (needleTargetPos.y - needleStartPos.y) * easeProgress;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–Ω—å
        if (needleShadowSprite) {
            needleShadowSprite.x = shadowStartPos.x + (shadowTargetPos.x - shadowStartPos.x) * easeProgress;
            needleShadowSprite.y = shadowStartPos.y + (shadowTargetPos.y - shadowStartPos.y) * easeProgress;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∫–ª–∏–∫–∞ –∏ –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y
        currentClickPoint.x = targetX;
        currentClickPoint.y = targetY;
        needleBaseY = needleSprite.y;
        
        if (progress < 1) {
            needleSprite.moveAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.moveAnimation = null;
        }
    }
    
    needleSprite.moveAnimation = requestAnimationFrame(animate);
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
function interpolateColor(colorFrom, colorTo, factor) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ hex —Ü–≤–µ—Ç–æ–≤
    const rFrom = (colorFrom >> 16) & 0xFF;
    const gFrom = (colorFrom >> 8) & 0xFF;
    const bFrom = colorFrom & 0xFF;
    
    const rTo = (colorTo >> 16) & 0xFF;
    const gTo = (colorTo >> 8) & 0xFF;
    const bTo = colorTo & 0xFF;
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const r = Math.round(rFrom + (rTo - rFrom) * factor);
    const g = Math.round(gFrom + (gTo - gFrom) * factor);
    const b = Math.round(bFrom + (bTo - bFrom) * factor);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
    return (r << 16) | (g << 8) | b;
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏
function startPulseAnimation(app) {
    function animate() {
        const centerShapeContainer = window.centerShape;
        
        if (centerShapeContainer && centerShapeContainer.pulseShape && CONFIG.centerShape.pulse.enabled) {
            const currentTime = Date.now();
            const elapsed = (currentTime - centerShapeContainer.pulseStartTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const pulseConfig = CONFIG.centerShape.pulse;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—É—Å–æ–∏–¥—ã
            const phase = elapsed * pulseConfig.speed * 2 * Math.PI;
            const normalizedSin = (Math.sin(phase) + 1) / 2; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
            const currentColor = interpolateColor(pulseConfig.colorFrom, pulseConfig.colorTo, normalizedSin);
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ñ–æ—Ä–º—É —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
            const pulseShape = centerShapeContainer.pulseShape;
            if (pulseShape) {
                pulseShape.clear();
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã
                const shapeSize = centerShapeContainer.cookieSize * CONFIG.centerShape.sizePercent;
                const pulseConfigUpdated = {
                    form: CONFIG.centerShape.form,
                    size: shapeSize,
                    color: currentColor,
                    lineWidth: pulseConfig.lineWidth,
                    alpha: pulseConfig.alpha,
                    dashed: pulseConfig.dashed,
                    dashLength: pulseConfig.dashLength,
                    gapLength: pulseConfig.gapLength
                };
                
                drawCenterShape(pulseShape, 0, 0, pulseConfigUpdated);
            }
        }
        
        requestAnimationFrame(animate);
    }
    
    animate();
}






// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—Ü (–ø–µ—á–µ–Ω—å–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞)
function isPointWithinBoundaries(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–µ—á–µ–Ω—å–∫–∏
    const distanceFromCookieCenter = Math.sqrt(
        Math.pow(x - cookieCenterX, 2) + 
        Math.pow(y - cookieCenterY, 2)
    );
    
    if (distanceFromCookieCenter >= cookieRadius - 2) {
        return false; // –í–Ω–µ –ø–µ—á–µ–Ω—å–∫–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É (–Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä—å)
    const centerShapeContainer = window.centerShape;
    if (centerShapeContainer) {
        const centerRadius = (cookieSprite.width * CONFIG.centerShape.sizePercent) / 2;
        const distanceFromCenter = Math.sqrt(
            Math.pow(x - cookieCenterX, 2) + 
            Math.pow(y - cookieCenterY, 2)
        );
        
        if (distanceFromCenter <= centerRadius) {
            return false; // –í–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        }
    }
    
    return true;
}

// –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ (–ø–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞)
function findExactBoundaryIntersection(x1, y1, x2, y2) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return null;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π –ø–µ—á–µ–Ω—å–∫–∏
    const cookieBoundary = findCircleIntersection(
        x1, y1, x2, y2,
        cookieCenterX, cookieCenterY, cookieRadius - 2
    );
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π
    const centerShapeContainer = window.centerShape;
    let centerBoundary = null;
    if (centerShapeContainer) {
        const centerRadius = (cookieSprite.width * CONFIG.centerShape.sizePercent) / 2;
        centerBoundary = findCircleIntersection(
            x1, y1, x2, y2,
            cookieCenterX, cookieCenterY, centerRadius
        );
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    if (cookieBoundary && centerBoundary) {
        const distToCookie = Math.sqrt(Math.pow(cookieBoundary.x - x1, 2) + Math.pow(cookieBoundary.y - y1, 2));
        const distToCenter = Math.sqrt(Math.pow(centerBoundary.x - x1, 2) + Math.pow(centerBoundary.y - y1, 2));
        return distToCookie < distToCenter ? cookieBoundary : centerBoundary;
    }
    
    return cookieBoundary || centerBoundary;
}



// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª—É—á–∞ —Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é
function findCircleIntersection(x1, y1, x2, y2, cx, cy, radius) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const fx = x1 - cx;
    const fy = y1 - cy;
    
    const a = dx * dx + dy * dy;
    const b = 2 * (fx * dx + fy * dy);
    const c = (fx * fx + fy * fy) - radius * radius;
    
    const discriminant = b * b - 4 * a * c;
    
    if (discriminant < 0) {
        return null; // –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    }
    
    const discriminantSqrt = Math.sqrt(discriminant);
    const t1 = (-b - discriminantSqrt) / (2 * a);
    const t2 = (-b + discriminantSqrt) / (2 * a);
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è (t > 0 –∏ t <= 1)
    let t = null;
    if (t1 >= 0 && t1 <= 1) {
        t = t1;
    } else if (t2 >= 0 && t2 <= 1) {
        t = t2;
    }
    
    if (t !== null) {
        return {
            x: x1 + t * dx,
            y: y1 + t * dy
        };
    }
    
    return null;
}


// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤
function findLineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
    const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    
    if (Math.abs(denom) < 1e-10) {
        return null; // –õ–∏–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã
    }
    
    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;
    const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –æ–±–æ–∏—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤
    if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
        const intersection = {
            x: x1 + t * (x2 - x1),
            y: y1 + t * (y2 - y1)
        };
        
        return intersection;
    }
    
    return null;
}



// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø–µ—á–µ–Ω—å—è)
function isPointInCoreArea(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    const coreSize = (cookieSprite.width * centerShapeConfig.sizePercent) / 2;
    
    switch (centerShapeConfig.form) {
        case 1: // –ö—Ä—É–≥
            const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            return distance <= coreSize;
            
        case 2: // –ö–≤–∞–¥—Ä–∞—Ç
            return Math.abs(x - centerX) <= coreSize && Math.abs(y - centerY) <= coreSize;
            
        case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - –∫–∞–∫ –∫—Ä—É–≥)
            const triangleDistance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            return triangleDistance <= coreSize;
            
        default:
            return false;
    }
}

// –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–µ–π, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function findDetachedAreas() {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return [];
    
    const detachedAreas = [];
    const cookieRadius = cookieSprite.width / 2;
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –ø–µ—á–µ–Ω—å—è
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    const testPoints = [];
    const numTestPoints = 32; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
    
    for (let i = 0; i < numTestPoints; i++) {
        const angle = (i / numTestPoints) * Math.PI * 2;
        const testRadius = cookieRadius * 0.9; // –ù–µ–º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫—Ä–∞—è
        const testX = centerX + Math.cos(angle) * testRadius;
        const testY = centerY + Math.sin(angle) * testRadius;
        
        testPoints.push({ x: testX, y: testY, angle: angle });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    for (const point of testPoints) {
        if (!isPointConnectedToCore(point.x, point.y)) {
            // –¢–æ—á–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ - —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å
            const area = createAreaAroundPoint(point);
            if (area && area.size > CONFIG.chips.minSize) {
                detachedAreas.push(area);
            }
        }
    }
    
    return detachedAreas;
}


// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –æ—Ç–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
function createAreaAroundPoint(point) {
    const areaSize = 40; // –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏
    return {
        centerX: point.x,
        centerY: point.y,
        size: areaSize,
        angle: point.angle
    };
}





// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–æ–ª–æ–≤—à–µ–≥–æ—Å—è –∫—É—Å–∫–∞
function createChip(area) {
    if (isDev) {
        console.log(`üç™ –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–æ–ª–æ–≤—à–∏–π—Å—è –∫—É—Å–æ–∫ –≤ (${area.centerX.toFixed(1)}, ${area.centerY.toFixed(1)})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫—É—Å–∫–∞
    const chip = new Graphics();
    chip.circle(0, 0, area.size / 2).fill(CONFIG.chips.visual.color);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Å–æ–∫
    chip.x = area.centerX;
    chip.y = area.centerY;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ stage (–ø–æ–≤–µ—Ä—Ö –ø–µ—á–µ–Ω—å—è)
    app.stage.addChild(chip);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–∞–ª—ã–≤–∞–Ω–∏—è
    animateChipFall(chip, area);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è –∫—É—Å–∫–∞
function animateChipFall(chip, area) {
    const physics = CONFIG.chips.physics;
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    let velocityX = physics.initialVelocity.x.min + 
                   Math.random() * (physics.initialVelocity.x.max - physics.initialVelocity.x.min);
    let velocityY = physics.initialVelocity.y.min + 
                   Math.random() * (physics.initialVelocity.y.max - physics.initialVelocity.y.min);
    
    // –í—Ä–∞—â–µ–Ω–∏–µ
    let rotationSpeed = physics.rotation.min + 
                       Math.random() * (physics.rotation.max - physics.rotation.min);
    
    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    const animate = () => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∑–∏–∫—É
        velocityY += physics.gravity;
        chip.x += velocityX;
        chip.y += velocityY;
        chip.rotation += rotationSpeed;
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        chip.scale.x *= CONFIG.chips.visual.scaleReduction;
        chip.scale.y *= CONFIG.chips.visual.scaleReduction;
        chip.alpha -= physics.fadeSpeed;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        if (chip.alpha > 0 && chip.y < app.screen.height + 100) {
            requestAnimationFrame(animate);
        } else {
            // –£–¥–∞–ª—è–µ–º –∫—É—Å–æ–∫
            app.stage.removeChild(chip);
            chip.destroy();
        }
    };
    
    animate();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp().catch(console.error);