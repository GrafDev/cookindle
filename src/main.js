import { Application, Assets, Sprite, Graphics, Texture, BlurFilter, Container, FillGradient } from 'pixi.js';
import { CONFIG } from './config.js';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const isDev = import.meta.env.DEV;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                 ('ontouchstart' in window) || 
                 (navigator.maxTouchPoints > 0) ||
                 (window.matchMedia && window.matchMedia("(pointer: coarse)").matches);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥–ª—ã
let needleBaseY = 0; // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
let needlePressed = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
let currentClickPoint = { x: 0, y: 0 }; // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –∫–ª–∏–∫–∞/–∫–∞—Å–∞–Ω–∏—è
let isDragging = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
let gameOverShown = false; // –§–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ Game Over
let victoryShown = false; // –§–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–æ–ª–æ–≤
let chipsContainer = null; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –æ—Å–∫–æ–ª–∫–æ–≤
let activeChips = []; // –ú–∞—Å—Å–∏–≤ –ø–∞–¥–∞—é—â–∏—Ö –æ—Å–∫–æ–ª–∫–æ–≤


// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º dev —Ä–µ–∂–∏–º –≤ HTML
if (isDev) {
    document.body.classList.add('dev-mode');
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
if (isDev) {
    console.log('üîç User Agent:', navigator.userAgent);
    console.log('üîç ontouchstart in window:', 'ontouchstart' in window);
    console.log('üîç maxTouchPoints:', navigator.maxTouchPoints);
    console.log('üîç pointer: coarse:', window.matchMedia && window.matchMedia("(pointer: coarse)").matches);
    console.log('üì± isMobile:', isMobile);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function createDebugInfo() {
    const debugDiv = document.createElement('div');
    debugDiv.id = 'debug-info';
    debugDiv.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 10px;
        font-family: monospace;
        font-size: 12px;
        z-index: 9999;
        max-width: 300px;
        white-space: pre-wrap;
    `;
    
    const debugInfo = [
        `isMobile: ${isMobile}`,
        `ontouchstart: ${'ontouchstart' in window}`,
        `maxTouchPoints: ${navigator.maxTouchPoints}`,
        `pointer: coarse: ${window.matchMedia && window.matchMedia("(pointer: coarse)").matches}`,
        `User Agent: ${navigator.userAgent.substring(0, 50)}...`
    ].join('\n');
    
    debugDiv.textContent = debugInfo;
    document.body.appendChild(debugDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (debugDiv.parentNode) {
            debugDiv.parentNode.removeChild(debugDiv);
        }
    }, 10000);
}

// –ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å–∞–Ω–∏—è—Ö
function showTouchDebug(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
    if (!isDev) return;
    
    let touchDebugDiv = document.getElementById('touch-debug');
    
    if (!touchDebugDiv) {
        touchDebugDiv = document.createElement('div');
        touchDebugDiv.id = 'touch-debug';
        touchDebugDiv.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255,0,0,0.8);
            color: white;
            padding: 10px;
            font-family: monospace;
            font-size: 14px;
            z-index: 9999;
            max-width: 200px;
            white-space: pre-wrap;
        `;
        document.body.appendChild(touchDebugDiv);
    }
    
    touchDebugDiv.textContent = message;
    
    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (touchDebugDiv.parentNode) {
            touchDebugDiv.style.opacity = '0.5';
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    restoreConfigState();
    
    const canvas = document.getElementById('game-canvas');
    const gameArea = document.querySelector('.game-area');
    
    // –°–æ–∑–¥–∞–µ–º PixiJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const app = new Application();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await app.init({
        canvas: canvas,
        width: gameArea.clientWidth,
        height: gameArea.clientHeight,
        backgroundColor: CONFIG.pixi.backgroundColor,
        backgroundAlpha: CONFIG.pixi.backgroundAlpha,
        resizeTo: gameArea
    });
    
    // Dev –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isDev) {
        console.log('üéÆ Cookindle App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìê –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        console.log('üñ•Ô∏è PixiJS –≤–µ—Ä—Å–∏—è:', app.renderer.type);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        if (isDev) {
            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:', gameArea.clientWidth, 'x', gameArea.clientHeight);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
        updateCookieSize();
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (isDev) {
        window.app = app;
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    await initGame(app);
    
    return app;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö —Ñ–æ–Ω–æ–≤ –¥–ª—è CSS —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function makeBackgroundsTransparent() {
    // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ —Ñ–æ–Ω —É html –∏ body
    document.documentElement.style.cssText = `
        margin: 0;
        padding: 0;
        background: transparent;
    `;
    
    document.body.style.cssText = `
        margin: 0;
        padding: 0;
        background: transparent;
    `;
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω —É layout
    const layout = document.querySelector('.layout');
    if (layout) {
        layout.style.backgroundColor = 'transparent';
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω —É game-area –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
    const gameArea = document.querySelector('.game-area');
    const canvas = document.getElementById('game-canvas');
    
    if (gameArea) {
        gameArea.style.backgroundColor = 'transparent';
        gameArea.style.cursor = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–≥–ª—É
    }
    
    if (canvas) {
        canvas.style.cursor = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –≤—Å–µ–º body –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    document.body.style.cursor = 'none';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω–µ –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (gameArea) {
        // –ö–æ–≥–¥–∞ –º—ã—à—å –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        gameArea.addEventListener('mouseleave', () => {
            document.body.style.cursor = 'default';
        });
        
        // –ö–æ–≥–¥–∞ –º—ã—à—å –≤—Ö–æ–¥–∏—Ç –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å - —Å–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        gameArea.addEventListener('mouseenter', () => {
            document.body.style.cursor = 'none';
        });
    }
    
    if (isDev) {
        console.log('üîç CSS —Ñ–æ–Ω—ã —Å–¥–µ–ª–∞–Ω—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, –æ—Ç—Å—Ç—É–ø—ã —É–±—Ä–∞–Ω—ã');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initGame(app) {
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await loadAssets();
        
        // –î–µ–ª–∞–µ–º CSS —Ñ–æ–Ω—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
        makeBackgroundsTransparent();
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        createBackground(app);
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        createCookie(app);
        
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∏–≥–ª—É
        await loadNeedleTexture();
        createNeedle(app);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        setupInteractivity(app);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
        if (CONFIG.dev.showShapeButtons) {
            createShapeButtons();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        startPulseAnimation(app);
        
        if (isDev) {
            console.log('üç™ –ü–µ—á–µ–Ω—å–µ —Å–æ–∑–¥–∞–Ω–æ');
            console.log('ü™° –ò–≥–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadAssets() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const bgImageUrl = (await import('./assets/textures/bg.png')).default;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        const cookieImageUrl = (await import('./assets/textures/bg_cooke.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é');
            console.log('üìÅ URL —Ñ–æ–Ω–∞:', bgImageUrl);
            console.log('üìÅ URL –ø–µ—á–µ–Ω—å—è:', cookieImageUrl);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
        if (bgImageUrl) {
            const bgImg = new Image();
            const bgLoaded = new Promise((resolve, reject) => {
                bgImg.onload = () => resolve(bgImg);
                bgImg.onerror = reject;
            });
            bgImg.src = bgImageUrl;
            await bgLoaded;
            
            const bgTexture = Texture.from(bgImg);
            Assets.cache.set('background', bgTexture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ —Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', bgTexture.width, 'x', bgTexture.height);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—á–µ–Ω—å–µ
        if (cookieImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = cookieImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', error);
        
        // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ public –ø–∞–ø–∫—É
        try {
            const publicUrl = '/assets/textures/bg_cooke.png';
            
            if (isDev) {
                console.log('üîç –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public –ø–∞–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é');
                console.log('üìÅ URL –∏–∑ public:', publicUrl);
            }
            
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = publicUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('cookie', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ public –ø–∞–ø–∫–∏');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã:', texture.width, 'x', texture.height);
            }
            return;
            
        } catch (publicError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ public:', publicError);
            
            // –°–ø–æ—Å–æ–± 3: Fallback - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (isDev) {
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É');
            }
            createPixiTexture();
        }
    }
}


// –†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∑–æ—Ä–æ–≤ –Ω–∞ –ø–µ—á–µ–Ω—å–µ
function drawCookiePatterns(graphics, paintingType) {
    const patternConfig = CONFIG.cookie;
    
    for (let i = 0; i < patternConfig.patternCount; i++) {
        const angle = (i / patternConfig.patternCount) * Math.PI * 2;
        const radius = 60 + Math.random() * 80;
        const x = 200 + Math.cos(angle) * radius + (Math.random() - 0.5) * 40;
        const y = 200 + Math.sin(angle) * radius + (Math.random() - 0.5) * 40;
        const size = patternConfig.patternSize.min + Math.random() * (patternConfig.patternSize.max - patternConfig.patternSize.min);
        
        // –†–∏—Å—É–µ–º —É–∑–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (paintingType) {
            case "circle":
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "star":
                drawStarPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            case "cross":
                drawCrossPattern(graphics, x, y, size, patternConfig.patternColor);
                break;
            default:
                drawCirclePattern(graphics, x, y, size, patternConfig.patternColor);
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–≥–æ —É–∑–æ—Ä–∞
function drawCirclePattern(graphics, x, y, size, color) {
    graphics.circle(x, y, size);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–≤–µ–∑–¥—á–∞—Ç–æ–≥–æ —É–∑–æ—Ä–∞
function drawStarPattern(graphics, x, y, size, color) {
    const points = 5;
    const outerRadius = size;
    const innerRadius = size * 0.4;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—É
    graphics.moveTo(x, y - outerRadius);
    
    for (let i = 0; i < points * 2; i++) {
        const angle = (i * Math.PI) / points;
        const radius = i % 2 === 0 ? outerRadius : innerRadius;
        const px = x + Math.cos(angle - Math.PI / 2) * radius;
        const py = y + Math.sin(angle - Math.PI / 2) * radius;
        graphics.lineTo(px, py);
    }
    
    graphics.closePath();
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä–µ—Å—Ç–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —É–∑–æ—Ä–∞
function drawCrossPattern(graphics, x, y, size, color) {
    const thickness = size * 0.3;
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - thickness / 2, y - size, thickness, size * 2);
    graphics.fill(color);
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—Ä–µ—Å—Ç–∞
    graphics.rect(x - size, y - thickness / 2, size * 2, thickness);
    graphics.fill(color);
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function drawCenterShape(graphics, x, y, shapeConfig) {
    const { form, size, color, lineWidth, alpha, dashed, dashLength, gapLength, secondBorder, borderRadius } = shapeConfig;
    
    
    const halfSize = size / 2;
    
    // –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (dashed && dashLength && gapLength) {
        switch (form) {
            case 1: // –ö—Ä—É–≥
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha);
                break;
                
            default:
                drawDashedCircle(graphics, x, y, halfSize, dashLength, gapLength, color, lineWidth, alpha);
        }
    } else {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä–∞–Ω–∏—Ü—É (–ø–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π) –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (secondBorder && secondBorder.enabled) {
            const secondLineWidth = lineWidth + secondBorder.widthOffset;
            const secondHalfSize = halfSize + (secondBorder.widthOffset / 2);
            
            switch (form) {
                case 1: // –ö—Ä—É–≥
                    graphics.circle(x, y, secondHalfSize);
                    graphics.stroke({ color: secondBorder.color, width: secondLineWidth, alpha: secondBorder.alpha });
                    break;
                    
                case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                    const secondOffset = secondHalfSize;
                    const secondSquareRadius = borderRadius ? borderRadius.square : 0;
                    graphics.roundRect(x - secondOffset, y - secondOffset, size + secondBorder.widthOffset, size + secondBorder.widthOffset, secondSquareRadius);
                    graphics.stroke({ color: secondBorder.color, width: secondLineWidth, alpha: secondBorder.alpha });
                    break;
                    
                case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                    const secondTriangleRadius = borderRadius ? borderRadius.triangle : 0;
                    drawRoundedTriangleShape(graphics, x, y, size + secondBorder.widthOffset, secondTriangleRadius);
                    graphics.stroke({ color: secondBorder.color, width: secondLineWidth, alpha: secondBorder.alpha });
                    break;
                    
                default:
                    graphics.circle(x, y, secondHalfSize);
                    graphics.stroke({ color: secondBorder.color, width: secondLineWidth, alpha: secondBorder.alpha });
            }
        }
        
        // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä–∞–Ω–∏—Ü—É (–∑–∞–ª–∏–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∞—Å–∫—É —Å–ø—Ä–∞–π—Ç–∞)
        switch (form) {
            case 1: // –ö—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                const squareRadius = borderRadius ? borderRadius.square : 0;
                graphics.roundRect(x - halfSize, y - halfSize, size, size, squareRadius);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                const triangleRadius = borderRadius ? borderRadius.triangle : 0;
                drawRoundedTriangleShape(graphics, x, y, size, triangleRadius);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
                break;
                
            default:
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä—É–≥
                graphics.circle(x, y, halfSize);
                graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
        }
    }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawTriangleShape(graphics, x, y, size) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ –µ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É
    const centroidOffsetY = height / 3; // –¶–µ–Ω—Ç—Ä–æ–∏–¥ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    
    // –†–∏—Å—É–µ–º —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ (x, y)
    graphics.moveTo(x, y - (height - centroidOffsetY));           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x + halfBase, y + centroidOffsetY);           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.lineTo(x - halfBase, y + centroidOffsetY);           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    graphics.closePath();
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawRoundedTriangleShape(graphics, x, y, size, radius) {
    if (radius <= 0) {
        // –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —Ä–∏—Å—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        drawTriangleShape(graphics, x, y, size);
        return;
    }
    
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    // –¢–æ—á–∫–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    const p1 = { x: x, y: y - (height - centroidOffsetY) };           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    const p2 = { x: x + halfBase, y: y + centroidOffsetY };           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    const p3 = { x: x - halfBase, y: y + centroidOffsetY };           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    
    // –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É—è arc
    const points = [p1, p2, p3];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
    graphics.moveTo(
        points[0].x + radius * Math.cos(Math.atan2(points[2].y - points[0].y, points[2].x - points[0].x)),
        points[0].y + radius * Math.sin(Math.atan2(points[2].y - points[0].y, points[2].x - points[0].x))
    );
    
    // –†–∏—Å—É–µ–º —Å—Ç–æ—Ä–æ–Ω—ã —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
    for (let i = 0; i < 3; i++) {
        const current = points[i];
        const next = points[(i + 1) % 3];
        const prev = points[(i + 2) % 3];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –∫ —Å–æ—Å–µ–¥–Ω–∏–º
        const toPrev = { x: prev.x - current.x, y: prev.y - current.y };
        const toNext = { x: next.x - current.x, y: next.y - current.y };
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã
        const prevLen = Math.sqrt(toPrev.x * toPrev.x + toPrev.y * toPrev.y);
        const nextLen = Math.sqrt(toNext.x * toNext.x + toNext.y * toNext.y);
        
        toPrev.x /= prevLen;
        toPrev.y /= prevLen;
        toNext.x /= nextLen;
        toNext.y /= nextLen;
        
        // –¢–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥—É–≥–∏
        const arcStart = { x: current.x + radius * toPrev.x, y: current.y + radius * toPrev.y };
        const arcEnd = { x: current.x + radius * toNext.x, y: current.y + radius * toNext.y };
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –¥–æ –Ω–∞—á–∞–ª–∞ –¥—É–≥–∏
        graphics.lineTo(arcStart.x, arcStart.y);
        
        // –†–∏—Å—É–µ–º –¥—É–≥—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º quadraticCurveTo)
        graphics.quadraticCurveTo(current.x, current.y, arcEnd.x, arcEnd.y);
    }
    
    graphics.closePath();
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
function drawDashedCircle(graphics, x, y, radius, dashLength, gapLength, color, lineWidth, alpha) {
    
    const circumference = 2 * Math.PI * radius;
    const totalDashLength = dashLength + gapLength;
    const numDashes = Math.floor(circumference / totalDashLength);
    
    for (let i = 0; i < numDashes; i++) {
        const startAngle = (i * totalDashLength / radius);
        const endAngle = startAngle + (dashLength / radius);
        
        const startX = x + Math.cos(startAngle) * radius;
        const startY = y + Math.sin(startAngle) * radius;
        const endX = x + Math.cos(endAngle) * radius;
        const endY = y + Math.sin(endAngle) * radius;
        
        graphics.moveTo(startX, startY);
        graphics.lineTo(endX, endY);
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
function drawDashedRect(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const halfSize = size / 2;
    const sides = [
        [{x: x - halfSize, y: y - halfSize}, {x: x + halfSize, y: y - halfSize}], // –í–µ—Ä—Ö
        [{x: x + halfSize, y: y - halfSize}, {x: x + halfSize, y: y + halfSize}], // –ü—Ä–∞–≤–æ
        [{x: x + halfSize, y: y + halfSize}, {x: x - halfSize, y: y + halfSize}], // –ù–∏–∑
        [{x: x - halfSize, y: y + halfSize}, {x: x - halfSize, y: y - halfSize}]  // –õ–µ–≤–æ
    ];
    
    sides.forEach(side => {
        const start = side[0];
        const end = side[1];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let i = 0; i < numDashes; i++) {
            const t1 = (i * totalDashLength) / length;
            const t2 = ((i * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    });
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawDashedTriangle(graphics, x, y, size, dashLength, gapLength, color, lineWidth, alpha) {
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    const points = [
        {x: x, y: y - (height - centroidOffsetY)},           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        {x: x + halfBase, y: y + centroidOffsetY},           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        {x: x - halfBase, y: y + centroidOffsetY},           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ];
    
    for (let i = 0; i < 3; i++) {
        const start = points[i];
        const end = points[(i + 1) % 3];
        const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        const totalDashLength = dashLength + gapLength;
        const numDashes = Math.floor(length / totalDashLength);
        
        for (let j = 0; j < numDashes; j++) {
            const t1 = (j * totalDashLength) / length;
            const t2 = ((j * totalDashLength) + dashLength) / length;
            
            const startX = start.x + (end.x - start.x) * t1;
            const startY = start.y + (end.y - start.y) * t1;
            const endX = start.x + (end.x - start.x) * t2;
            const endY = start.y + (end.y - start.y) * t2;
            
            graphics.moveTo(startX, startY);
            graphics.lineTo(endX, endY);
        }
    }
    
    graphics.stroke({ color: color, width: lineWidth, alpha: alpha });
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–≤–æ–¥–∫–æ–π
function createCenterShapeWithPulse(x, y, cookieSize, cookieSprite) {
    const container = new Graphics();
    const shapeSize = cookieSize * CONFIG.centerShape.sizePercent;
    const shapeConfig = { ...CONFIG.centerShape, size: shapeSize };
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –ø–µ—á–µ–Ω—å—è (–∫–∞–∫ —É –∫—É—Å–æ—á–∫–æ–≤)
    const cookieTexture = Assets.get('cookie');
    if (cookieTexture) {
        const textureSprite = new Sprite(cookieTexture);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—á–µ–Ω—å–∫–æ–π
        textureSprite.anchor.set(0.5);
        textureSprite.width = cookieSize; // –ò—Å–ø–æ–ª—å–∑—É–µ–º cookieSize –≤–º–µ—Å—Ç–æ cookieSprite.width
        textureSprite.height = cookieSize;
        textureSprite.x = 0; // –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        textureSprite.y = 0;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –≤ —Ñ–æ—Ä–º–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
        const shapeMask = new Graphics();
        const halfSize = shapeSize / 2;
        
        switch (CONFIG.centerShape.form) {
            case 1: // –ö—Ä—É–≥
                shapeMask.circle(0, 0, halfSize);
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                const squareRadius = CONFIG.centerShape.borderRadius ? CONFIG.centerShape.borderRadius.square : 0;
                shapeMask.roundRect(-halfSize, -halfSize, shapeSize, shapeSize, squareRadius);
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                const triangleRadius = CONFIG.centerShape.borderRadius ? CONFIG.centerShape.borderRadius.triangle : 0;
                drawRoundedTriangleShape(shapeMask, 0, 0, shapeSize, triangleRadius);
                break;
                
            default:
                shapeMask.circle(0, 0, halfSize);
        }
        shapeMask.fill({ color: 0xFFFFFF });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ —Å–ø—Ä–∞–π—Ç—É
        textureSprite.mask = shapeMask;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç –∏ –º–∞—Å–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.addChild(textureSprite);
        container.addChild(shapeMask);
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É (—Ç–æ–ª—å–∫–æ –æ–±–≤–æ–¥–∫–∞)
    const mainShape = new Graphics();
    drawCenterShape(mainShape, 0, 0, shapeConfig);
    container.addChild(mainShape);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –≤—ã–≥—Ä—ã–∑—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    if (CONFIG.centerShape.pulse.enabled) {
        console.log('üî• –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≥—Ä—ã–∑—ã –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ!');
        const holes = generateHolePositions(0, 0, shapeConfig);
        console.log('üï≥Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π:', holes.length);
        
        holes.forEach(hole => {
            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π bg.png
            const bgTexture = Assets.get('background');
            if (bgTexture) {
                const bgSprite = new Sprite(bgTexture);
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç
                bgSprite.anchor.set(0.5);
                bgSprite.x = hole.x;
                bgSprite.y = hole.y;
                
                // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
                const holeMask = new Graphics();
                holeMask.circle(hole.x, hole.y, 2); // –ï—â–µ –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –∫—Ä—É–∂–∫–∞
                holeMask.fill(0xFFFFFF);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ —Å–ø—Ä–∞–π—Ç—É
                bgSprite.mask = holeMask;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç –∏ –º–∞—Å–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                container.addChild(bgSprite);
                container.addChild(holeMask);
                
                console.log('üñºÔ∏è –°–æ–∑–¥–∞–Ω –∫—Ä—É–≥–ª—ã–π –∫—É—Å–æ—á–µ–∫ —Ñ–æ–Ω–∞ –≤:', hole.x, hole.y);
            } else {
                console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ background');
            }
        });
        
        console.log('‚úÖ –í—ã–≥—Ä—ã–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container.x = x;
    container.y = y;
    
    return container;
}


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –ø–æ –∫–æ–Ω—Ç—É—Ä—É —Ñ–æ—Ä–º—ã
function generateHolePositions(x, y, shapeConfig) {
    const { form, size } = shapeConfig;
    const halfSize = size / 2;
    const holes = [];
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
    const holeSpacing = 15; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ä—Å—Ç–∏—è–º–∏
    
    switch (form) {
        case 1: // –ö—Ä—É–≥
            const circumference = 2 * Math.PI * halfSize;
            const holeCount = Math.floor(circumference / holeSpacing);
            
            for (let i = 0; i < holeCount; i++) {
                const angle = (i / holeCount) * 2 * Math.PI;
                const holeX = x + Math.cos(angle) * halfSize;
                const holeY = y + Math.sin(angle) * halfSize;
                holes.push({ x: holeX, y: holeY });
            }
            break;
            
        case 2: // –ö–≤–∞–¥—Ä–∞—Ç
            const perimeter = 4 * size;
            const squareHoleCount = Math.floor(perimeter / holeSpacing);
            
            for (let i = 0; i < squareHoleCount; i++) {
                const progress = i / squareHoleCount;
                let holeX, holeY;
                
                if (progress < 0.25) {
                    // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                    holeX = x + (progress * 4 - 0.5) * size;
                    holeY = y - halfSize;
                } else if (progress < 0.5) {
                    // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                    holeX = x + halfSize;
                    holeY = y + ((progress - 0.25) * 4 - 0.5) * size;
                } else if (progress < 0.75) {
                    // –ù–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                    holeX = x + (0.5 - (progress - 0.5) * 4) * size;
                    holeY = y + halfSize;
                } else {
                    // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                    holeX = x - halfSize;
                    holeY = y + (0.5 - (progress - 0.75) * 4) * size;
                }
                
                holes.push({ x: holeX, y: holeY });
            }
            break;
            
        case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è)
            const triangleHeight = size * Math.sqrt(3) / 2;
            const triangleHalfBase = size / 2;
            const triangleCentroidOffsetY = triangleHeight / 3;
            const trianglePerimeter = 3 * size;
            const triangleHoleCount = Math.floor(trianglePerimeter / holeSpacing);
            
            // –í–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ drawTriangleShape)
            const trianglePoints = [
                {x: x, y: y - (triangleHeight - triangleCentroidOffsetY)},           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
                {x: x + triangleHalfBase, y: y + triangleCentroidOffsetY},           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
                {x: x - triangleHalfBase, y: y + triangleCentroidOffsetY},           // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
            ];
            
            for (let i = 0; i < triangleHoleCount; i++) {
                const progress = i / triangleHoleCount;
                let holeX, holeY;
                
                if (progress < 1/3) {
                    // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –∫ –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π)
                    const t = progress * 3;
                    const start = trianglePoints[0];
                    const end = trianglePoints[1];
                    holeX = start.x + (end.x - start.x) * t;
                    holeY = start.y + (end.y - start.y) * t;
                } else if (progress < 2/3) {
                    // –ù–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫ –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π)
                    const t = (progress - 1/3) * 3;
                    const start = trianglePoints[1];
                    const end = trianglePoints[2];
                    holeX = start.x + (end.x - start.x) * t;
                    holeY = start.y + (end.y - start.y) * t;
                } else {
                    // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–æ—Ç –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫ –≤–µ—Ä—Ö–Ω–µ–π)
                    const t = (progress - 2/3) * 3;
                    const start = trianglePoints[2];
                    const end = trianglePoints[0];
                    holeX = start.x + (end.x - start.x) * t;
                    holeY = start.y + (end.y - start.y) * t;
                }
                
                holes.push({ x: holeX, y: holeY });
            }
            break;
    }
    
    return holes;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã—Ö "–æ—Ç–≤–µ—Ä—Å—Ç–∏–π" –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Ä—É—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
function addPerforatedHoles(container, x, y, shapeConfig) {
    console.log('üî• addPerforatedHoles –≤—ã–∑–≤–∞–Ω–∞!', x, y, shapeConfig);
    
    const holes = generateHolePositions(x, y, shapeConfig);
    console.log('üï≥Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π:', holes.length);
    
    if (holes.length === 0) {
        console.log('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!');
        return;
    }
    
    // –†–∏—Å—É–µ–º –∫—Ä—É–∂–æ—á–∫–∏ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∏–ª–∏ —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    holes.forEach(hole => {
        console.log('‚ö™ –°–æ–∑–¥–∞–µ–º "–æ—Ç–≤–µ—Ä—Å—Ç–∏–µ" –≤:', hole.x, hole.y);
        const holeGraphics = new Graphics();
        holeGraphics.circle(hole.x, hole.y, 4);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
        holeGraphics.fill(0xF5F5F5); // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        container.addChild(holeGraphics);
    });
    
    console.log('‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ "–æ—Ç–≤–µ—Ä—Å—Ç–∏—è" –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —á–µ—Ä–µ–∑ PixiJS Graphics
function createPixiTexture() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º PixiJS —Ç–µ–∫—Å—Ç—É—Ä—É –ø–µ—á–µ–Ω—å—è');
        console.log('üé® –£–∑–æ—Ä –Ω–∞ –ø–µ—á–µ–Ω—å–µ:', CONFIG.cookie.painting);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤—É –ø–µ—á–µ–Ω—å—è (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PixiJS v8)
    graphics.circle(200, 200, 180);
    graphics.fill(0xD2691E); // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–æ—Ä—ã –Ω–∞ –ø–µ—á–µ–Ω—å–µ
    drawCookiePatterns(graphics, CONFIG.cookie.painting);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    drawCenterShape(graphics, 200, 200, CONFIG.centerShape);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const app = window.app; // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à Assets
    Assets.cache.set('cookie', texture);
    
    if (isDev) {
        console.log('‚úÖ PixiJS —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø–µ—á–µ–Ω—å—è —Å–æ–∑–¥–∞–Ω–∞');
        console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã: 400x400px');
    }
}

// –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function createBackground(app) {
    const backgroundTexture = Assets.get('background');
    if (!backgroundTexture) return;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –∫–∞–∫ CSS —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const bgElement = document.createElement('div');
    bgElement.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-image: url('${backgroundTexture.source.resource.src}');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -1000;
        pointer-events: none;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ body (–Ω–µ –≤ gameArea!)
    document.body.appendChild(bgElement);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    window.background = bgElement;
    
    if (isDev) {
        console.log('üñºÔ∏è –§–æ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω:', window.innerWidth, 'x', window.innerHeight);
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–µ—á–µ–Ω—å–µ
function createCookie(app) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
    const cookieTexture = Assets.get('cookie');
    const cookieSprite = new Sprite(cookieTexture);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    cookieSprite.anchor.set(0.5); // –¶–µ–Ω—Ç—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—á–µ–Ω—å–∫—É - –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
    cookieSprite.visible = false;
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É (–Ω–æ –Ω–µ–≤–∏–¥–∏–º—É—é)
    app.stage.addChild(cookieSprite);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    window.cookie = cookieSprite;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
    // const hexGraphics = drawBigHexagon(app, cookieSprite);
    
    // –†–∞–∑–º–µ—â–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∏
    const smallHexagons = generateSmallHexagons(app, cookieSprite);
    
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –ü–û–í–ï–†–• –∫—É—Å–æ—á–∫–æ–≤
    const centerShapeContainer = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize, cookieSprite);
    app.stage.addChild(centerShapeContainer);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    window.centerShape = centerShapeContainer;
    // window.bigHexagon = hexGraphics; // –ë–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å–∫—Ä—ã—Ç
    window.smallHexagons = smallHexagons;
    
    if (isDev) {
        console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è:', cookieSize);
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
    }
    
    return cookieSprite;
}

// ========================
// –°–ò–°–¢–ï–ú–ê –®–ï–°–¢–ò–£–ì–û–õ–¨–ù–ò–ö–û–í
// ========================

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–æ–∫—Ä—É–≥ –ø–µ—á–µ–Ω—å—è
function drawBigHexagon(app, cookieSprite) {
    const cookieRadius = cookieSprite.width / 2;
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    
    // –†–∞–¥–∏—É—Å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ = —Ä–∞–¥–∏—É—Å –≤–ø–∏—Å–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ / cos(30¬∞)
    const bigHexRadius = cookieRadius / Math.cos(Math.PI / 6);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const hexGraphics = new Graphics();
    
    // –†–∏—Å—É–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
    const vertices = [];
    for (let i = 0; i < 6; i++) {
        const angle = (i * Math.PI) / 3; // 60 –≥—Ä–∞–¥—É—Å–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏
        const x = centerX + Math.cos(angle) * bigHexRadius;
        const y = centerY + Math.sin(angle) * bigHexRadius;
        vertices.push(x, y);
    }
    
    hexGraphics.poly(vertices);
    hexGraphics.stroke({ color: 0xFF0000, width: 3, alpha: 0.8 });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
    app.stage.addChild(hexGraphics);
    
    if (isDev) {
        console.log(`üî∑ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω –±–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–¥–∏—É—Å–∞ ${bigHexRadius.toFixed(1)}`);
        console.log(`üç™ –ü–µ—á–µ–Ω—å–∫–∞ —Ä–∞–¥–∏—É—Å–∞ ${cookieRadius.toFixed(1)} –≤–ø–∏—Å–∞–Ω–∞ –≤ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫`);
    }
    
    return hexGraphics;
}


// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω–∏—Ö –∫—É—Å–æ—á–∫–æ–≤ - —É–¥–∞–ª—è–µ–º —Ç–µ, —á—Ç–æ –Ω–µ –≥—Ä–∞–Ω–∏—á–∞—Ç —Å –æ–±—ã—á–Ω—ã–º–∏
function filterEdgePiecesWithRegularNeighbors(hexagons, app) {
    const edgePieces = hexagons.filter(hex => hex.isEdgePiece);
    const regularPieces = hexagons.filter(hex => !hex.isEdgePiece && !hex.isInCenterShape);
    const toRemove = [];
    
    for (const edgeHex of edgePieces) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫—Ä–∞–π–Ω–µ–≥–æ –∫—É—Å–æ—á–∫–∞ —Å–æ—Å–µ–¥–∏ —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
        const neighbors = findHexagonNeighbors(edgeHex, regularPieces);
        
        if (neighbors.length === 0) {
            // –ù–µ—Ç —Å–æ—Å–µ–¥–µ–π —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ - —É–¥–∞–ª—è–µ–º
            toRemove.push(edgeHex);
            
            // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—Ü–µ–Ω—ã
            if (edgeHex.container && edgeHex.container.parent) {
                edgeHex.container.parent.removeChild(edgeHex.container);
                edgeHex.container.destroy();
            }
        }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    const filtered = hexagons.filter(hex => !toRemove.includes(hex));
    
    
    return filtered;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞–µ–≤—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function markEdgeOfCenterShapePieces(hexagons) {
    const centerPieces = hexagons.filter(hex => hex.isInCenterShape);
    
    for (const centerPiece of centerPieces) {
        // –ù–∞–π–¥–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —ç—Ç–æ–≥–æ –∫—É—Å–æ—á–∫–∞
        const neighbors = findHexagonNeighbors(centerPiece, hexagons);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ —Å–æ—Å–µ–¥–µ–π –∫—É—Å–æ—á–∫–∏ –ù–ï –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
        const hasNonCenterNeighbor = neighbors.some(neighbor => !neighbor.isInCenterShape);
        
        if (hasNonCenterNeighbor) {
            // –≠—Ç–æ—Ç –∫—É—Å–æ—á–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫—Ä–∞—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
            centerPiece.isEdgeOfCenterShape = true;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑ —Ü–≤–µ—Ç–Ω—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤)
            if (centerPiece.container && CONFIG.dev.showColorOverlays) {
                const sides = CONFIG.cookie.pieces.polygonSides;
                const enlargedRadius = centerPiece.radius * CONFIG.cookie.pieces.sizeMultiplier;
                
                const greenOverlay = new Graphics();
                // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –∑–µ–ª–µ–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
                const overlayVertices = [];
                for (let j = 0; j < sides; j++) {
                    const angle = (j * 2 * Math.PI) / sides;
                    const vx = Math.cos(angle) * enlargedRadius;
                    const vy = Math.sin(angle) * enlargedRadius;
                    overlayVertices.push(vx, vy);
                }
                greenOverlay.poly(overlayVertices);
                greenOverlay.fill({ color: 0x00FF00, alpha: 0.3 }); // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
                greenOverlay.x = 0;
                greenOverlay.y = 0;
                
                centerPiece.container.addChild(greenOverlay);
            }
            
            if (isDev) {
            }
        } else {
            centerPiece.isEdgeOfCenterShape = false;
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –ø–µ—á–µ–Ω—å—è
function generateSmallHexagons(app, cookieSprite) {
    const config = CONFIG.cookie.pieces;
    const hexGrid = config.hexGrid; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ
    const cookieRadius = cookieSprite.width / 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    // –†–∞–¥–∏—É—Å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ = —Ä–∞–¥–∏—É—Å –≤–ø–∏—Å–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ / cos(30¬∞)
    const bigHexRadius = cookieRadius / Math.cos(Math.PI / 6);
    // –î–∏–∞–≥–æ–Ω–∞–ª—å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ (–º–µ–∂–¥—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏) = 2 * bigHexRadius
    const bigHexDiameter = 2 * bigHexRadius;
    // hexGrid - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ = radius * ‚àö3
    // –§–æ—Ä–º—É–ª–∞: bigHexDiameter = hexGrid * (smallHexRadius * ‚àö3)
    const smallHexRadius = bigHexDiameter / (hexGrid * Math.sqrt(3));
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    
    const hexagons = [];
    let hexId = 0;
    
    if (isDev) {
        console.log(`üîç –°–æ–∑–¥–∞–µ–º –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É: ${hexGrid} —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏ –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞`);
        console.log(`üîç –†–∞–¥–∏—É—Å –ø–µ—á–µ–Ω—å—è: ${cookieRadius.toFixed(1)}px`);
        console.log(`üîç –†–∞–¥–∏—É—Å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞: ${bigHexRadius.toFixed(1)}px`);
        console.log(`üîç –î–∏–∞–≥–æ–Ω–∞–ª—å –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞: ${bigHexDiameter.toFixed(1)}px`);
        console.log(`üîç –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞: ${smallHexRadius.toFixed(1)}px`);
    }
    
    
    // –°–æ–∑–¥–∞–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤–æ—Ä–æ—Ç–∞
    function createHexagon(x, y, hexId, color = 0x0000FF, rotationOffset = 0, isInCenterShape = false, isEdgePiece = false) {
        const hexGraphics = new Graphics();
        
        // –†–∏—Å—É–µ–º –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        const vertices = [];
        const sides = CONFIG.cookie.pieces.polygonSides;
        const enlargedRadius = smallHexRadius * CONFIG.cookie.pieces.sizeMultiplier;
        for (let j = 0; j < sides; j++) {
            const angle = (j * 2 * Math.PI) / sides + rotationOffset;
            const vx = x + Math.cos(angle) * enlargedRadius;
            const vy = y + Math.sin(angle) * enlargedRadius;
            vertices.push(vx, vy);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç —Å –ø–æ–ª–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π –ø–µ—á–µ–Ω—å–∫–∏
        const cookieTexture = Assets.get('cookie');
        const textureSprite = new Sprite(cookieTexture);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—á–µ–Ω—å–∫–æ–π
        textureSprite.anchor.set(0.5);
        textureSprite.width = cookieSprite.width;
        textureSprite.height = cookieSprite.height;
        textureSprite.x = cookieSprite.x;
        textureSprite.y = cookieSprite.y;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const mask = new Graphics();
        // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const localVertices = [];
        for (let j = 0; j < sides; j++) {
            const angle = (j * 2 * Math.PI) / sides + rotationOffset;
            const vx = Math.cos(angle) * enlargedRadius;
            const vy = Math.sin(angle) * enlargedRadius;
            localVertices.push(vx, vy);
        }
        mask.poly(localVertices);
        mask.fill({ color: 0xFFFFFF });
        mask.x = x;
        mask.y = y;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ —Å–ø—Ä–∞–π—Ç—É
        textureSprite.mask = mask;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
        const hexContainer = new Container();
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
        hexContainer.x = x;
        hexContainer.y = y;
        
        // –°–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        textureSprite.x = cookieSprite.x - x;
        textureSprite.y = cookieSprite.y - y;
        mask.x = 0;
        mask.y = 0;
        
        hexContainer.addChild(textureSprite);
        hexContainer.addChild(mask);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–∑–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∫—É—Å–æ—á–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑ –æ–≤–µ—Ä–ª–µ–µ–≤)
        if (isInCenterShape && CONFIG.dev.showColorOverlays) {
            const pinkOverlay = new Graphics();
            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —Ä–æ–∑–æ–≤–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è (–∫–∞–∫ –º–∞—Å–∫–∞)
            const overlayVertices = [];
            for (let j = 0; j < sides; j++) {
                const angle = (j * 2 * Math.PI) / sides + rotationOffset;
                const vx = Math.cos(angle) * enlargedRadius;
                const vy = Math.sin(angle) * enlargedRadius;
                overlayVertices.push(vx, vy);
            }
            pinkOverlay.poly(overlayVertices);
            pinkOverlay.fill({ color: 0xFF69B4, alpha: 0.5 }); // –†–æ–∑–æ–≤—ã–π —Å 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            pinkOverlay.x = 0;
            pinkOverlay.y = 0;
            
            hexContainer.addChild(pinkOverlay);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∫—Ä–∞–π–Ω–∏—Ö –∫—É—Å–æ—á–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑ –æ–≤–µ—Ä–ª–µ–µ–≤)
        if (isEdgePiece && CONFIG.dev.showColorOverlays) {
            const blueOverlay = new Graphics();
            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —Å–∏–Ω–µ–≥–æ –æ–≤–µ—Ä–ª–µ—è (–∫–∞–∫ –º–∞—Å–∫–∞)
            const overlayVertices = [];
            for (let j = 0; j < sides; j++) {
                const angle = (j * 2 * Math.PI) / sides + rotationOffset;
                const vx = Math.cos(angle) * enlargedRadius;
                const vy = Math.sin(angle) * enlargedRadius;
                overlayVertices.push(vx, vy);
            }
            blueOverlay.poly(overlayVertices);
            blueOverlay.fill({ color: 0x0080FF, alpha: 0.3 }); // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π —Å 30% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            blueOverlay.x = 0;
            blueOverlay.y = 0;
            
            hexContainer.addChild(blueOverlay);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (CONFIG.dev.showSplitPieces && color !== 0x0000FF) {
            const colorOverlay = new Graphics();
            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
            const overlayVertices = [];
            for (let j = 0; j < sides; j++) {
                const angle = (j * 2 * Math.PI) / sides + rotationOffset;
                const vx = Math.cos(angle) * enlargedRadius;
                const vy = Math.sin(angle) * enlargedRadius;
                overlayVertices.push(vx, vy);
            }
            colorOverlay.poly(overlayVertices);
            colorOverlay.fill({ color: color, alpha: 0.6 }); // –¶–≤–µ—Ç —Å 60% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            colorOverlay.x = 0;
            colorOverlay.y = 0;
            
            hexContainer.addChild(colorOverlay);
        }
        
        // –£–±–∏—Ä–∞–µ–º –æ–±–≤–æ–¥–∫—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç—É—Ä—É
        
        // –£–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∏–≥–ª—É
        hexContainer.eventMode = 'none';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É
        app.stage.addChild(hexContainer);
        
        return {
            id: `small_hex_${hexId}`,
            graphics: null, // –£–±–∏—Ä–∞–µ–º graphics —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –æ–±–≤–æ–¥–∫–∏
            container: hexContainer,
            textureSprite: textureSprite,
            mask: mask,
            x: x,
            y: y,
            radius: smallHexRadius,
            index: hexId,
            originalColor: color,
            currentColor: color,
            isPainted: false,
            isInCenterShape: isInCenterShape, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
            isEdgePiece: isEdgePiece, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∞–π–Ω–∏—Ö –∫—É—Å–æ—á–∫–∞—Ö
            isEdgeOfCenterShape: false // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ –≤ markEdgeOfCenterShapePieces
        };
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
    const rotationOffset = Math.PI / 6; // 30 –≥—Ä–∞–¥—É—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö
    const hexWidth = smallHexRadius * Math.sqrt(3); // –®–∏—Ä–∏–Ω–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
    const hexHeight = smallHexRadius * 1.5; // –í—ã—Å–æ—Ç–∞ –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–¥–∏—É—Å —Å–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ
    const hexGridRadius = Math.ceil(hexGrid / 2) + 1; // –ü–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç –¥–∏–∞–º–µ—Ç—Ä–∞ + –∑–∞–ø–∞—Å
    
    if (isDev) {
        console.log(`üîç –†–∞–∑–º–µ—Ä –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞: ${smallHexRadius.toFixed(1)}px`);
        console.log(`üîç –†–∞–¥–∏—É—Å –ø–µ—á–µ–Ω—å—è: ${cookieRadius.toFixed(1)}px`);
        console.log(`üîç –†–∞–¥–∏—É—Å —Å–µ—Ç–∫–∏: ${hexGridRadius} (–¥–ª—è ${hexGrid} —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ)`);
        console.log(`üîç –†–∞–∑–º–µ—Ä—ã: hexWidth=${hexWidth.toFixed(1)}, hexHeight=${hexHeight.toFixed(1)}`);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–µ–∫—Å–∞–≥–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É —Å –∫—É–±–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    for (let q = -hexGridRadius; q <= hexGridRadius; q++) {
        for (let r = Math.max(-hexGridRadius, -q - hexGridRadius); r <= Math.min(hexGridRadius, -q + hexGridRadius); r++) {
            const s = -q - r;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
            if (Math.abs(q) > hexGridRadius || Math.abs(r) > hexGridRadius || Math.abs(s) > hexGridRadius) {
                continue;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É–±–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (q, r, s) –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã (x, y)
            const x = centerX + hexWidth * (q + r * 0.5);
            const y = centerY + hexHeight * r;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é –ø–µ—á–µ–Ω—å—è
            const distanceFromCenter = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            
            // –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å —Å –ø–µ—á–µ–Ω—å–µ–º
            // –£—Å–ª–æ–≤–∏–µ: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–µ—á–µ–Ω—å—è <= —Ä–∞–¥–∏—É—Å –ø–µ—á–µ–Ω—å—è + —Ä–∞–¥–∏—É—Å —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
            if (distanceFromCenter > cookieRadius + smallHexRadius) {
                continue; // –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω–µ –ø–µ—á–µ–Ω—å—è
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ø–µ—á–µ–Ω—å—è
            // –ï—Å–ª–∏ —Ü–µ–Ω—Ç—Ä —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–∞–ª—å—à–µ —á–µ–º —Ä–∞–¥–∏—É—Å –ø–µ—á–µ–Ω—å—è - —Ä–∞–¥–∏—É—Å —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞, 
            // —Ç–æ –æ–Ω –º–æ–∂–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            const isInsideCookie = distanceFromCenter <= cookieRadius - smallHexRadius;
            const hasIntersection = distanceFromCenter <= cookieRadius + smallHexRadius;
            
            if (!hasIntersection) {
                continue; // –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –ø–µ—á–µ–Ω—å–µ–º
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
            const isInCenterShape = isPointInCoreArea(x, y);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ –∫—Ä–∞–π–Ω–∏–º (–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏)
            const isEdgePiece = !isInsideCookie && hasIntersection;
            
            // –ü–æ–≤–æ—Ä–æ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            const rotation = CONFIG.cookie.pieces.randomRotation ? 
                Math.random() * 2 * Math.PI : 
                rotationOffset;
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            const tempHex = {
                x: x,
                y: y,
                radius: smallHexRadius,
                id: hexId
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
            const intersectsBoundary = isHexagonIntersectingCenterBoundary(tempHex);
            
            if (intersectsBoundary) {
                // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã —Å –∫—É—Å–æ—á–∫–æ–º
                const intersections = calculateShapeBoundaryIntersections(tempHex);
                
                if (intersections.length >= 2) {
                    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–∞—Å–∫–∞–º–∏
                    const splitResult = createSplitHexagons(x, y, hexId, rotation, tempHex, intersections, isEdgePiece);
                    
                    if (splitResult) {
                        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å
                        splitResult.innerHex.q = q;
                        splitResult.innerHex.r = r;
                        splitResult.innerHex.s = s;
                        splitResult.innerHex.isSplitPart = true;
                        splitResult.innerHex.partType = 'inner';
                        splitResult.innerHex.originalId = tempHex.id;
                        hexagons.push(splitResult.innerHex);
                        
                        // –í–Ω–µ—à–Ω—è—è —á–∞—Å—Ç—å
                        splitResult.outerHex.q = q;
                        splitResult.outerHex.r = r;
                        splitResult.outerHex.s = s;
                        splitResult.outerHex.isSplitPart = true;
                        splitResult.outerHex.partType = 'outer';
                        splitResult.outerHex.originalId = tempHex.id;
                        hexagons.push(splitResult.outerHex);
                        
                        hexId += 2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –Ω–∞ 2 (–¥–ª—è –¥–≤—É—Ö —á–∞—Å—Ç–µ–π)
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Å–æ—á–µ–∫
                    let color = CONFIG.dev.splitPieceColors.regular;
                    // –û—Å–Ω–æ–≤–∞–Ω–∏–µ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏) –ø–æ–º–µ—á–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º
                    // if (isInCenterShape) {
                    //     color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è
                    // }
                    const hex = createHexagon(x, y, hexId++, color, rotation, isInCenterShape, isEdgePiece);
                    hex.q = q;
                    hex.r = r;
                    hex.s = s;
                    hexagons.push(hex);
                }
            } else {
                // –û–±—ã—á–Ω—ã–π –∫—É—Å–æ—á–µ–∫ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É—Å–æ—á–∫–∞
                let color;
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
                if (isEdgePiece) {
                    color = CONFIG.dev.showSplitPieces ? CONFIG.dev.splitPieceColors.edgePiece : 0x0080FF;
                } else {
                    color = isInsideCookie ? 0x00FF00 : 0xFFFF00; // –ó–µ–ª–µ–Ω—ã–π - –≤–Ω—É—Ç—Ä–∏, –∂–µ–ª—Ç—ã–π - –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è
                }
                
                // –û—Å–Ω–æ–≤–∞–Ω–∏–µ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏) –ø–æ–º–µ—á–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º
                // if (isInCenterShape) {
                //     color = 0xFF0000; // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–∞–Ω–∏—è
                // }
                
                const hex = createHexagon(x, y, hexId++, color, rotation, isInCenterShape, isEdgePiece);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–±–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
                hex.q = q;
                hex.r = r;
                hex.s = s;
                
                hexagons.push(hex);
            }
            
        }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–∏–Ω–∏–µ –∫—É—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≥—Ä–∞–Ω–∏—á–∞—Ç —Å –æ–±—ã—á–Ω—ã–º–∏
    const filteredHexagons = filterEdgePiecesWithRegularNeighbors(hexagons, app);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∞–µ–≤—ã–µ –∫—É—Å–æ—á–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
    markEdgeOfCenterShapePieces(filteredHexagons);
    
    if (isDev) {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${filteredHexagons.length} –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º–∏ —É–≥–ª–∞–º–∏`);
    }
    
    return filteredHexagons;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ—á–µ–Ω—å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateCookieSize() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–µ—à–∞
    const cookieSprite = window.cookie;
    const centerShapeGraphics = window.centerShape;
    const backgroundSprite = window.background;
    if (!cookieSprite) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ (CSS —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è)
    if (window.background && isDev) {
        console.log('üñºÔ∏è –§–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞');
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞
    cookieSprite.width = cookieSize;
    cookieSprite.height = cookieSize;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    cookieSprite.x = gameWidth / 2;
    cookieSprite.y = gameHeight / 2;
    
    // –ë–æ–ª—å—à–æ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å–∫—Ä—ã—Ç, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
    /*
    const bigHexagon = window.bigHexagon;
    if (bigHexagon) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
        bigHexagon.parent?.removeChild(bigHexagon);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newHexagon = drawBigHexagon(window.app, cookieSprite);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.bigHexagon = newHexagon;
    }
    */
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∏
    const smallHexagons = window.smallHexagons;
    if (smallHexagons && smallHexagons.length > 0) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∏
        smallHexagons.forEach(hex => {
            if (hex.container && hex.container.parent) {
                hex.container.parent.removeChild(hex.container);
                hex.container.destroy();
            } else if (hex.graphics && hex.graphics.parent) {
                hex.graphics.parent.removeChild(hex.graphics);
                hex.graphics.destroy();
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newSmallHexagons = generateSmallHexagons(window.app, cookieSprite);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.smallHexagons = newSmallHexagons;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –ü–û–í–ï–†–• –∫—É—Å–æ—á–∫–æ–≤
    const centerShapeContainer = window.centerShape;
    if (centerShapeContainer) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        centerShapeContainer.parent?.removeChild(centerShapeContainer);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        const newCenterShape = createCenterShapeWithPulse(cookieSprite.x, cookieSprite.y, cookieSize);
        window.app.stage.addChild(newCenterShape);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        window.centerShape = newCenterShape;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã
    updateNeedleSize();
    
    
    console.log('üç™ –†–∞–∑–º–µ—Ä –ø–µ—á–µ–Ω—å—è –æ–±–Ω–æ–≤–ª–µ–Ω:', cookieSize);
    console.log('üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', cookieSprite.x, cookieSprite.y);
}

// ===================================
// –°–ò–°–¢–ï–ú–ê –û–ö–†–ê–®–ò–í–ê–ù–ò–Ø –®–ï–°–¢–ò–£–ì–û–õ–¨–ù–ò–ö–û–í
// ===================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –≤ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
function isPointInHexagon(pointX, pointY, hexagon) {
    const hexX = hexagon.x;
    const hexY = hexagon.y;
    const radius = hexagon.radius;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ—á–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const dx = pointX - hexX;
    const dy = pointY - hexY;
    
    // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–æ—á–∫—É –Ω–∞ -30 –≥—Ä–∞–¥—É—Å–æ–≤ (–æ–±—Ä–∞—Ç–Ω–æ –ø–æ–≤–æ—Ä–æ—Ç—É —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞)
    const rotationOffset = -Math.PI / 6;
    const cos = Math.cos(rotationOffset);
    const sin = Math.sin(rotationOffset);
    const rotatedX = dx * cos - dy * sin;
    const rotatedY = dx * sin + dy * cos;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ –º–µ—Ç–æ–¥–æ–º –æ—Å–µ–π
    const absX = Math.abs(rotatedX);
    const absY = Math.abs(rotatedY);
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å –¥–ª—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    const enlargedRadius = radius * CONFIG.cookie.pieces.sizeMultiplier;
    const distance = Math.sqrt(absX * absX + absY * absY);
    return distance <= enlargedRadius;
}

// –ü–æ–∏—Å–∫ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ–¥ —Ç–æ—á–∫–æ–π
function findHexagonAtPoint(x, y) {
    const smallHexagons = window.smallHexagons;
    if (!smallHexagons) return null;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞–º –∏ –∏—â–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
    for (const hexagon of smallHexagons) {
        if (isPointInHexagon(x, y, hexagon)) {
            // –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —á–∞—Å—Ç—å
            if (hexagon.isSplitPart) {
                const isInCenterArea = isPointInCoreArea(x, y);
                
                // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                if (hexagon.partType === 'inner' && isInCenterArea) {
                    return hexagon;
                }
                
                // –í–Ω–µ—à–Ω–∏–µ —á–∞—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Å–Ω–∞—Ä—É–∂–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                if (hexagon.partType === 'outer' && !isInCenterArea) {
                    return hexagon;
                }
                
                // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫—É—Å–æ—á–µ–∫
                continue;
            }
            
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return hexagon;
        }
    }
    
    return null;
}

// –ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ (–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –º–µ–Ω—å—à–µ —É–¥–≤–æ–µ–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞)
function findHexagonNeighbors(targetHexagon, allHexagons) {
    const neighbors = [];
    const maxDistance = targetHexagon.radius * 2.2; // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º 2 —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è —É—á–µ—Ç–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
    
    for (const hexagon of allHexagons) {
        if (hexagon.id === targetHexagon.id) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
        
        const distance = Math.sqrt(
            Math.pow(hexagon.x - targetHexagon.x, 2) + 
            Math.pow(hexagon.y - targetHexagon.y, 2)
        );
        
        if (distance <= maxDistance) {
            // –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã inner/outer
            if (targetHexagon.isSplitPart && hexagon.isSplitPart && 
                targetHexagon.originalId === hexagon.originalId && 
                distance < 0.1) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ—é –ø–∞—Ä—É (inner/outer —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)
                continue;
            }
            
            neighbors.push(hexagon);
        }
    }
    
    return neighbors;
}


// –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (BFS)
function findConnectedComponents(clickedHexagon, allHexagons) {
    const visited = new Set();
    // –û—Å–Ω–æ–≤–æ–π —Å—á–∏—Ç–∞—é—Ç—Å—è: –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ + –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
    const centerHexagons = allHexagons.filter(hex => 
        !hex.isPainted && (
            (hex.isInCenterShape && !hex.isSplitPart) || // –û–±—ã—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏
            (hex.isSplitPart && hex.partType === 'inner') // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
        )
    );
    // –ò—Å–∫–ª—é—á–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ –∫—É—Å–æ—á–∫–∏ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
    // –¢–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ (–æ–Ω–∏ —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –æ—Å–Ω–æ–≤—ã)
    const nonCenterHexagons = allHexagons.filter(hex => 
        !hex.isPainted && 
        !hex.isEdgePiece && 
        !(hex.isInCenterShape && !hex.isSplitPart) && // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ
        !(hex.isSplitPart && hex.partType === 'inner') // –ò—Å–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
    );
    const edgeHexagons = allHexagons.filter(hex => hex.isEdgePiece && !hex.isPainted);
    
    // –§—É–Ω–∫—Ü–∏—è BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
    function bfsComponent(startHexagon, hexagonsPool) {
        const component = [];
        const queue = [startHexagon];
        visited.add(startHexagon.id);
        
        while (queue.length > 0) {
            const current = queue.shift();
            component.push(current);
            
            const neighbors = findHexagonNeighbors(current, hexagonsPool);
            for (const neighbor of neighbors) {
                if (!visited.has(neighbor.id) && !neighbor.isPainted) {
                    visited.add(neighbor.id);
                    queue.push(neighbor);
                }
            }
        }
        
        return component;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
    function hasPathToCenter(component) {
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
        // –í–∫–ª—é—á–∞–µ–º: –æ—Å–Ω–æ–≤—É + –≤–Ω–µ—à–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ + –æ–±—ã—á–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –∫—É—Å–æ—á–∫–∏
        const allAvailableHexagons = [
            ...centerHexagons,
            ...allHexagons.filter(hex => 
                !hex.isPainted && 
                (hex.isSplitPart && hex.partType === 'outer') // –í–Ω–µ—à–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
            ),
            ...nonCenterHexagons
        ];
        
        // BFS –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –æ—Ç –ª—é–±–æ–≥–æ –∫—É—Å–æ—á–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ –æ—Å–Ω–æ–≤–µ
        const visited = new Set();
        const queue = [...component];
        
        // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫—É—Å–æ—á–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
        component.forEach(hex => visited.add(hex.id));
        
        while (queue.length > 0) {
            const current = queue.shift();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –æ—Å–Ω–æ–≤—ã
            if (centerHexagons.some(centerHex => centerHex.id === current.id)) {
                return true;
            }
            
            // –ò—â–µ–º —Å–æ—Å–µ–¥–µ–π —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
            const neighbors = findHexagonNeighbors(current, allAvailableHexagons);
            for (const neighbor of neighbors) {
                if (!visited.has(neighbor.id) && !neighbor.isPainted) {
                    visited.add(neighbor.id);
                    queue.push(neighbor);
                }
            }
        }
        
        return false;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞–π–Ω–∏—Ö –∫—É—Å–æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É–ø–∞—Å—Ç—å
    function findFallingEdgePieces(disconnectedComponents) {
        const fallingEdgePieces = [];
        
        for (const edgeHex of edgeHexagons) {
            let shouldFall = false;
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ —Å–æ—Å–µ–¥–µ–π –ø–∞–¥–∞—é—â–∏–µ –û–ë–´–ß–ù–´–ï –∫—É—Å–æ—á–∫–∏ –∏–∑ –æ—Ç–∫–æ–ª–æ–≤—à–∏—Ö—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            const neighbors = findHexagonNeighbors(edgeHex, allHexagons);
            const hasFallingRegularNeighbor = neighbors.some(neighbor => 
                !neighbor.isEdgePiece && // –°–æ—Å–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ã—á–Ω—ã–º, –Ω–µ –∫—Ä–∞–π–Ω–∏–º
                !neighbor.isInCenterShape && // –ò –Ω–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                disconnectedComponents.some(component => component.includes(neighbor))
            );
            
            if (hasFallingRegularNeighbor) {
                shouldFall = true;
                if (isDev) {
                }
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞—Ç—ã–π –∫—É—Å–æ—á–µ–∫ —Å–æ—Å–µ–¥–æ–º –∏ –æ–±—ã—á–Ω—ã–º (–Ω–µ –∫—Ä–∞–π–Ω–∏–º)
            if (!shouldFall && !clickedHexagon.isEdgePiece && !clickedHexagon.isInCenterShape) {
                const isNeighborOfClicked = neighbors.some(neighbor => neighbor.id === clickedHexagon.id);
                if (isNeighborOfClicked) {
                    shouldFall = true;
                    if (isDev) {
                    }
                }
            }
            
            if (shouldFall) {
                fallingEdgePieces.push(edgeHex);
                if (isDev) {
                    console.log(`üîµ –ö—Ä–∞–µ–≤–æ–π –∫—É—Å–æ—á–µ–∫ (${edgeHex.x.toFixed(1)}, ${edgeHex.y.toFixed(1)}) –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å`);
                }
            }
        }
        
        return fallingEdgePieces;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º –Ω–∞–∂–∞—Ç—ã–π –∫—É—Å–æ—á–µ–∫ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π
    visited.add(clickedHexagon.id);
    const disconnectedHexagons = [];
    const disconnectedComponents = [];
    
    // –ò—â–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ä–µ–¥–∏ –Ω–µ-—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ-–∫—Ä–∞–π–Ω–∏—Ö –∫—É—Å–æ—á–∫–æ–≤
    for (const hexagon of nonCenterHexagons) {
        if (!visited.has(hexagon.id) && !hexagon.isPainted) {
            const component = bfsComponent(hexagon, nonCenterHexagons);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—É—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É
            if (!hasPathToCenter(component)) {
                disconnectedHexagons.push(...component);
                disconnectedComponents.push(component);
            }
        }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞–π–Ω–∏–µ –∫—É—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É–ø–∞—Å—Ç—å
    const fallingEdgePieces = findFallingEdgePieces(disconnectedComponents);
    disconnectedHexagons.push(...fallingEdgePieces);
    
    return disconnectedHexagons;
}

// –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
function paintHexagon(hexagon, color = 0xFF0000) {
    if (!hexagon || hexagon.isPainted) return false;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
    const graphics = hexagon.graphics;
    graphics.clear();
    
    // –†–∏—Å—É–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º –∑–∞–ª–∏–≤–∫–∏
    const vertices = [];
    const rotationOffset = Math.PI / 6; // 30 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç
    for (let j = 0; j < 6; j++) {
        const angle = (j * Math.PI) / 3 + rotationOffset;
        const vx = hexagon.x + Math.cos(angle) * hexagon.radius;
        const vy = hexagon.y + Math.sin(angle) * hexagon.radius;
        vertices.push(vx, vy);
    }
    
    graphics.poly(vertices);
    graphics.fill(color); // –ó–∞–ª–∏–≤–∫–∞ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    graphics.stroke({ color: hexagon.originalColor, width: 1, alpha: 0.5 }); // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ–±–≤–æ–¥–∫—É
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    hexagon.currentColor = color;
    hexagon.isPainted = true;
    
    if (isDev) {
        console.log(`üî¥ –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ ${hexagon.id} –æ–∫—Ä–∞—à–µ–Ω –≤ –∫—Ä–∞—Å–Ω—ã–π`);
    }
    
    return true;
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Å–æ—á–∫–æ–≤ –ø–æ –∫–æ–ª—å—Ü–∞–º –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—É—Å–æ—á–∫–∞
function getHexagonsByRings(centerHex, allHexagons, maxCount) {
    if (!centerHex || !allHexagons || maxCount <= 0) return [];
    
    const result = [centerHex];
    const added = new Set([centerHex.id]);
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    const directions = [
        [1, -1, 0], [1, 0, -1], [0, 1, -1],
        [-1, 1, 0], [-1, 0, 1], [0, -1, 1]
    ];
    
    let currentRing = [centerHex];
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–ª—å—Ü–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    while (result.length < maxCount && currentRing.length > 0) {
        const nextRing = [];
        
        for (const hex of currentRing) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Å–æ—á–∫–∞
            for (const [dq, dr, ds] of directions) {
                const neighborQ = hex.q + dq;
                const neighborR = hex.r + dr;
                const neighborS = hex.s + ds;
                
                // –ò—â–µ–º —Å–æ—Å–µ–¥–µ–π –≤ –º–∞—Å—Å–∏–≤–µ –≤—Å–µ—Ö –∫—É—Å–æ—á–∫–æ–≤
                const neighbors = allHexagons.filter(h => 
                    h.q === neighborQ && h.r === neighborR && h.s === neighborS
                );
                
                // –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –Ω–∞ –æ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö - –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                for (const neighbor of neighbors) {
                    if (neighbor && !added.has(neighbor.id) && !neighbor.isPainted) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫—É—Å–æ—á–µ–∫ –≤—ã–ø–∞—Å—Ç—å (–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞–µ–≤—ã–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã)
                        const canFall = !neighbor.isEdgeOfCenterShape && 
                                       !(neighbor.isInCenterShape && !neighbor.isEdgeOfCenterShape);
                        
                        if (canFall) {
                            result.push(neighbor);
                            added.add(neighbor.id);
                            nextRing.push(neighbor);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                            if (result.length >= maxCount) {
                                return result;
                            }
                        }
                    }
                }
            }
        }
        
        currentRing = nextRing;
    }
    
    return result;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã –Ω–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∏
function handleNeedlePaintingAtPoint() {
    if (!needlePressed) return false;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∫–ª–∏–∫–∞ (–≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞)
    // –≤–º–µ—Å—Ç–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å–ø—Ä–∞–π—Ç–∞ –∏–≥–ª—ã
    const needleTipX = currentClickPoint.x;
    const needleTipY = currentClickPoint.y;
    
    
    const hexagon = findHexagonAtPoint(needleTipX, needleTipY);
    if (hexagon && !hexagon.isPainted) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—é—Ç Game Over)
        if (hexagon.isSplitPart && hexagon.partType === 'inner') {
            if (isDev) {
                console.log('üü° –ö–ª–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç–∏ (–∂–µ–ª—Ç–∞—è) - Game Over!');
            }
            // –°–†–ê–ó–£ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ Game Over, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–±–µ–¥—ã
            gameOverShown = true;
            // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ø–∞–µ–º –≤—Å—é –ø–µ—á–µ–Ω—å–∫—É, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Game Over
            animateFullCookieCrumble(() => {
                showGameOverModal();
            });
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ (–≤–Ω–µ—à–Ω–∏–µ —á–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã)
        if (hexagon.isSplitPart && hexagon.partType === 'outer') {
            if (isDev) {
                console.log('üü¢ –ö–ª–∏–∫ –ø–æ –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–∏ (–∑–µ–ª–µ–Ω–∞—è) - –±–µ–∑–æ–ø–∞—Å–Ω–æ!');
            }
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º (–≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã), –Ω–æ –ù–ï –∫—Ä–∞–µ–≤—ã–º
        if (hexagon.isInCenterShape && !hexagon.isEdgeOfCenterShape) {
            // –°–†–ê–ó–£ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ Game Over, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–±–µ–¥—ã
            gameOverShown = true;
            // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ø–∞–µ–º –≤—Å—é –ø–µ—á–µ–Ω—å–∫—É, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Game Over
            animateFullCookieCrumble(() => {
                showGameOverModal();
            });
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ –∫—Ä–∞–µ–≤—ã–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
        if (hexagon.isEdgeOfCenterShape) {
            // –ö—Ä–∞–µ–≤—ã–µ –∫—É—Å–æ—á–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –Ω–µ –ø–∞–¥–∞—é—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            if (isDev) {
            }
            return false; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫—É—Å–æ—á–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        const allHexagons = window.smallHexagons;
        if (!allHexagons) return false;
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫—É—Å–æ—á–∫–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–∞–∂–∞—Ç—ã–π)
        const maxFallingPieces = CONFIG.cookie.pieces.maxFallingPieces;
        const minFallingPieces = Math.max(1, Math.ceil(maxFallingPieces / 3)); // –ú–∏–Ω–∏–º—É–º = —Ç—Ä–µ—Ç—å –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 1
        const randomFallingCount = Math.floor(Math.random() * (maxFallingPieces - minFallingPieces + 1)) + minFallingPieces; // –û—Ç minFallingPieces –¥–æ maxFallingPieces
        const fallingHexagons = getHexagonsByRings(hexagon, allHexagons, randomFallingCount);
        
        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –∫—É—Å–æ—á–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        fallingHexagons.forEach(hex => {
            hex.isPainted = true;
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫—É—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–≤—è–∑—å —Å —Ü–µ–Ω—Ç—Ä–æ–º –ø–æ—Å–ª–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        let disconnectedHexagons = [];
        fallingHexagons.forEach(fallingHex => {
            const disconnected = findConnectedComponents(fallingHex, allHexagons);
            disconnectedHexagons = disconnectedHexagons.concat(disconnected);
        });
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
        const uniqueDisconnected = disconnectedHexagons.filter((hex, index, self) => 
            index === self.findIndex(h => h.id === hex.id)
        );
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã –ø–µ—Ä–µ–¥ –ø–∞–¥–µ–Ω–∏–µ–º –∫—É—Å–æ—á–∫–æ–≤
        const needleAnimationDuration = CONFIG.needle.shadow.animationDuration * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        setTimeout(() => {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–∫–Ω—É—Ç–æ–≥–æ –∫—É—Å–æ—á–∫–∞
            if (hexagon.container) {
                animateHexagonFall(hexagon.container, hexagon.radius, hexagon.x, hexagon.y);
            }
            
            // –ß–µ—Ä–µ–∑ 0.1 —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
            setTimeout(() => {
                fallingHexagons.forEach((fallingHex) => {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫–Ω—É—Ç—ã–π –∫—É—Å–æ—á–µ–∫, –æ–Ω —É–∂–µ –ø–∞–¥–∞–µ—Ç
                    if (fallingHex.id !== hexagon.id && fallingHex.container) {
                        animateHexagonFall(fallingHex.container, fallingHex.radius, fallingHex.x, fallingHex.y);
                    }
                });
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫–æ–ª–æ–≤—à–∏—Ö—Å—è –∫—É—Å–æ—á–∫–æ–≤ —Ç–æ–∂–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                uniqueDisconnected.forEach((disconnectedHex) => {
                    if (disconnectedHex.container && !disconnectedHex.isPainted) {
                        disconnectedHex.isPainted = true;
                        animateHexagonFall(disconnectedHex.container, disconnectedHex.radius, disconnectedHex.x, disconnectedHex.y);
                    }
                });
            }, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ 0.1 —Å–µ–∫—É–Ω–¥—ã (100 –º—Å)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
            // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ Game Over
            setTimeout(() => {
                if (!gameOverShown && checkVictoryCondition()) {
                    showCongratulationsModal();
                }
            }, CONFIG.cookie.pieces.chipAnimation.duration * 1000 + 600); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é + –±—É—Ñ–µ—Ä + –∑–∞–¥–µ—Ä–∂–∫–∞
            
        }, needleAnimationDuration);
        
        return true;
    }
    
    return false;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
function updateNeedleSize() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏–≥–ª—ã
    const needleTexture = needleSprite.texture;
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    if (isMobile) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏–µ –ø–æ Y
        needleSprite.scale.set(scale, -scale);
    } else {
        needleSprite.scale.set(scale);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Ç–µ–Ω–∏
    if (needleShadowSprite) {
        const shadowTexture = needleShadowSprite.texture;
        const shadowScale = needleSize / Math.max(shadowTexture.width, shadowTexture.height);
        needleShadowSprite.scale.set(shadowScale);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        needleSprite.y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        needleBaseY = needleSprite.y;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏
        if (needleShadowSprite) {
            const x = gameWidth * CONFIG.needle.mobile.staticPosition.x;
            const y = gameHeight * CONFIG.needle.mobile.staticPosition.y;
            updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, x, y, false);
        }
    }
    
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω:', needleSize, 'scale:', scale);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã
async function loadNeedleTexture() {
    try {
        // –°–ø–æ—Å–æ–± 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import
        const needleImageUrl = (await import('./assets/textures/needle.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', needleImageUrl);
        }
        
        if (needleImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = needleImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('needle', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –∏–≥–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥–ª—ã:', texture.width, 'x', texture.height);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–Ω—å –∏–≥–ª—ã
            await loadNeedleShadowTexture();
            return;
        }
        
        throw new Error('Import –∏–≥–ª—ã –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∏–≥–ª—ã:', error);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        createProgrammaticNeedle();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã
async function loadNeedleShadowTexture() {
    try {
        // –°–ø–æ—Å–æ–± 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π import
        const needleShadowImageUrl = (await import('./assets/textures/needle_shadow.png')).default;
        
        if (isDev) {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–µ–Ω–∏ –∏–≥–ª—ã');
            console.log('üìÅ URL —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã:', needleShadowImageUrl);
        }
        
        if (needleShadowImageUrl) {
            // –°–æ–∑–¥–∞–µ–º Image —ç–ª–µ–º–µ–Ω—Ç
            const img = new Image();
            
            // –ü—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageLoaded = new Promise((resolve, reject) => {
                img.onload = () => resolve(img);
                img.onerror = reject;
            });
            
            img.src = needleShadowImageUrl;
            await imageLoaded;
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const texture = Texture.from(img);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            Assets.cache.set('needleShadow', texture);
            
            if (isDev) {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ —Ç–µ–Ω–∏ –∏–≥–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('üñºÔ∏è –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–∏ –∏–≥–ª—ã:', texture.width, 'x', texture.height);
            }
            return;
        }
        
        throw new Error('Import —Ç–µ–Ω–∏ –∏–≥–ª—ã –≤–µ—Ä–Ω—É–ª undefined');
        
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–µ–Ω–∏ –∏–≥–ª—ã:', error);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–Ω—å –∫–∞–∫ fallback
        createProgrammaticNeedleShadow();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–≥–ª—ã –∫–∞–∫ fallback
function createProgrammaticNeedle() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∏–≥–ª—É');
    }
    
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–≥–ª—É
    // –û—Å—Ç—Ä–∏–µ
    graphics.moveTo(0, 0);
    graphics.lineTo(3, 10);
    graphics.lineTo(-3, 10);
    graphics.closePath();
    graphics.fill(0x888888);
    
    // –°—Ç–µ—Ä–∂–µ–Ω—å
    graphics.rect(-1, 10, 2, 20);
    graphics.fill(0x888888);
    
    // –£—à–∫–æ
    graphics.circle(0, 32, 3);
    graphics.stroke({ color: 0x888888, width: 1 });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    const app = window.app;
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
    Assets.cache.set('needle', texture);
    
    if (isDev) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–≥–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ç–µ–Ω–∏ –∏–≥–ª—ã –∫–∞–∫ fallback
function createProgrammaticNeedleShadow() {
    if (isDev) {
        console.log('üî∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç–µ–Ω—å –∏–≥–ª—ã');
    }
    
    const graphics = new Graphics();
    
    // –†–∏—Å—É–µ–º —Ç–µ–Ω—å –∏–≥–ª—ã (–±–æ–ª–µ–µ —Ç–µ–º–Ω–∞—è –∏ —Ä–∞–∑–º—ã—Ç–∞—è –≤–µ—Ä—Å–∏—è)
    // –û—Å—Ç—Ä–∏–µ
    graphics.moveTo(2, 2); // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–µ–Ω–∏
    graphics.lineTo(5, 12);
    graphics.lineTo(-1, 12);
    graphics.closePath();
    graphics.fill(0x333333); // –¢–µ–º–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥–ª—ã
    
    // –°—Ç–µ—Ä–∂–µ–Ω—å
    graphics.rect(1, 12, 2, 20);
    graphics.fill(0x333333);
    
    // –£—à–∫–æ
    graphics.circle(2, 34, 3);
    graphics.stroke({ color: 0x333333, width: 1 });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    const app = window.app;
    const texture = app.renderer.generateTexture(graphics);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
    Assets.cache.set('needleShadow', texture);
    
    if (isDev) {
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ç–µ–Ω—å –∏–≥–ª—ã —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–∞–ª—å—Ü–∞/–º—ã—à–∏
function calculateContactPoint(inputX, inputY) {
    if (isMobile) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É –∏–≥–ª—ã (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        const needleSprite = window.needle;
        if (needleSprite) {
            // –ó–µ—Ä–∫–∞–ª—é —Ç–æ–ª—å–∫–æ –ø–æ Y –æ—Å–∏!
            const touchOffset = CONFIG.needle.touchOffset;
            return {
                x: inputX - needleSprite.width * touchOffset.x,
                y: inputY - needleSprite.height * (1 - touchOffset.y)
            };
        }
    }
    
    // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –º—ã—à—å = —Ç–æ—á–∫–∞ –∫–∞—Å–∞–Ω–∏—è
    return { x: inputX, y: inputY };
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∞
function calculateNeedlePosition(inputX, inputY, pressed = false) {
    const distance = CONFIG.needle.shadow.distance;
    
    if (isMobile) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏–≥–ª–∞ —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è –ø–∞–ª—å—Ü–∞
        // –ò–≥–ª–∞ –≤—Å–µ–≥–¥–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è –ø–∞–ª—å—Ü–∞
        return { x: inputX, y: inputY };
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –∏–≥–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤
        if (pressed) {
            return { x: inputX, y: inputY }; // –ò–≥–ª–∞ –≤ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è (–æ—Å—Ç—Ä–∏–µ)
        } else {
            return { x: inputX, y: inputY - distance }; // –ò–≥–ª–∞ –≤—ã—à–µ —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∞
function calculateShadowPosition(inputX, inputY, pressed = false) {
    const distance = CONFIG.needle.shadow.distance;
    
    if (isMobile) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–Ω—å —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è –ø–∞–ª—å—Ü–∞
        // –¢–µ–Ω—å –≤—Å–µ–≥–¥–∞ —Å–º–µ—â–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∏–≥–ª—ã
        return { x: inputX + distance, y: inputY + distance };
    } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —Ç–µ–Ω—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤
        if (pressed) {
            return { x: inputX, y: inputY }; // –¢–µ–Ω—å –≤ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è
        } else {
            return { x: inputX + distance, y: inputY - distance }; // –¢–µ–Ω—å —Å–º–µ—â–µ–Ω–∞
        }
    }
}


// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –≤–≤–æ–¥–∞
function updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, inputX, inputY, pressed = false) {
    if (!needleSprite) return;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–≤–æ–¥–∞
    const contactPoint = calculateContactPoint(inputX, inputY);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –∫–∞—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∫–ª–∏–∫–∞
    currentClickPoint.x = contactPoint.x;
    currentClickPoint.y = contactPoint.y;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–≤–æ–¥–∞
    const needlePos = calculateNeedlePosition(inputX, inputY, pressed);
    needleSprite.x = needlePos.x;
    needleSprite.y = needlePos.y;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–≤–æ–¥–∞
    if (needleShadowSprite) {
        const shadowPos = calculateShadowPosition(inputX, inputY, pressed);
        needleShadowSprite.x = shadowPos.x;
        needleShadowSprite.y = shadowPos.y;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y
    needleBaseY = needlePos.y;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function createDebugPoint() {
    const graphics = new Graphics();
    graphics.circle(0, 0, 1); // –†–∞–¥–∏—É—Å 1px
    graphics.fill(0xFF0000); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
    graphics.zIndex = 2000; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
    graphics.visible = false; // –°–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    return graphics;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤ (–∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞)
function showDebugPoint(inputX, inputY) {
    if (!isDev) return; // –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    let debugPoint = window.debugPoint;
    if (!debugPoint) {
        debugPoint = createDebugPoint();
        window.app.stage.addChild(debugPoint);
        window.debugPoint = debugPoint;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫—É –∫–∞—Å–∞–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤
    const contactPoint = calculateContactPoint(inputX, inputY);
    
    debugPoint.x = contactPoint.x;
    debugPoint.y = contactPoint.y;
    debugPoint.visible = true;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (debugPoint) {
            debugPoint.visible = false;
        }
    }, 2000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ –∏–≥–ª—ã
function createNeedle(app) {
    const needleTexture = Assets.get('needle');
    const needleShadowTexture = Assets.get('needleShadow');
    const needleSprite = new Sprite(needleTexture);
    const needleShadowSprite = new Sprite(needleShadowTexture);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–≥–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—á–µ–Ω—å—è
    const gameArea = document.querySelector('.game-area');
    const gameWidth = gameArea.clientWidth;
    const gameHeight = gameArea.clientHeight;
    const minSize = Math.min(gameWidth, gameHeight);
    const cookieSize = minSize * CONFIG.cookie.sizePercent;
    const needleSize = cookieSize * (CONFIG.needle.sizePercent / 100);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥–ª—ã
    const scale = needleSize / Math.max(needleTexture.width, needleTexture.height);
    needleSprite.scale.set(scale);
    needleSprite.zIndex = 1000; // –ò–≥–ª–∞ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–∏ –∏–≥–ª—ã
    const shadowScale = needleSize / Math.max(needleShadowTexture.width, needleShadowTexture.height);
    needleShadowSprite.scale.set(shadowScale);
    needleShadowSprite.zIndex = 999; // –¢–µ–Ω—å –ø–æ–¥ –∏–≥–ª–æ–π
    needleShadowSprite.alpha = CONFIG.needle.shadow.alpha; // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        needleSprite.visible = true;
        needleShadowSprite.visible = false; // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–Ω—å —Å–∫—Ä—ã—Ç–∞ —Å—Ä–∞–∑—É
        needleSprite.anchor.set(CONFIG.needle.mouseOffset.x, CONFIG.needle.mouseOffset.y); // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        needleShadowSprite.anchor.set(CONFIG.needle.mouseOffset.x, CONFIG.needle.mouseOffset.y);
        
        // –û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ–º –∏–≥–ª—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ —É scale.y)
        needleSprite.scale.y = -needleSprite.scale.y;
        
        const startX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
        const startY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
        
        needleSprite.x = startX;
        needleSprite.y = startY;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–Ω–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, startX, startY, false);
        
        needleBaseY = needleSprite.y;
    } else {
        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é - –∏–≥–ª–∞ –ø–æ—è–≤–∏—Ç—Å—è –≥–¥–µ –º—ã—à—å
        needleSprite.visible = false; // –°–∫—Ä—ã—Ç–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ mouseenter
        needleShadowSprite.visible = false;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ü–µ–Ω—É (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ–Ω—å, –ø–æ—Ç–æ–º –∏–≥–ª—É)
    app.stage.addChild(needleShadowSprite);
    app.stage.addChild(needleSprite);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    window.needle = needleSprite;
    window.needleShadow = needleShadowSprite;
    console.log('ü™° –†–∞–∑–º–µ—Ä –∏–≥–ª—ã:', needleSize, 'scale:', scale);
    console.log('üåë –¢–µ–Ω—å –∏–≥–ª—ã —Å–æ–∑–¥–∞–Ω–∞');
    console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobile);
    
    return needleSprite;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function setupInteractivity(app) {
    const gameArea = document.querySelector('.game-area');
    const needleSprite = window.needle;
    
    if (!needleSprite) {
        console.error('‚ùå –°–ø—Ä–∞–π—Ç –∏–≥–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    showTouchDebug(`SETUP: ${isMobile ? 'MOBILE' : 'DESKTOP'}`);
    
    if (isMobile) {
        // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        setupMobileInteractivity(gameArea);
    } else {
        // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ª–æ–≥–∏–∫–∞ —Å –º—ã—à—å—é
        setupDesktopInteractivity(gameArea);
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    gameArea.addEventListener('click', (event) => {
        showTouchDebug('UNIVERSAL CLICK');
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        showTouchDebug(`CLICK: ${x.toFixed(0)}, ${y.toFixed(0)}`);
        
        if (isMobile) {
            animateNeedleToTouch(x, y);
            animateNeedlePress(true);
            
            setTimeout(() => {
                animateNeedlePress(false);
                setTimeout(() => {
                    const gameWidth = gameArea.clientWidth;
                    const gameHeight = gameArea.clientHeight;
                    const staticX = gameWidth * CONFIG.needle.mobile.staticPosition.x;
                    const staticY = gameHeight * CONFIG.needle.mobile.staticPosition.y;
                    animateNeedleToTouch(staticX, staticY);
                }, 200);
            }, 300);
        }
    });
    
    console.log('üñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è', isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–≥–æ' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
function setupDesktopInteractivity(gameArea) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousemove', (event) => {
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è
        updateNeedlePosition(x, y, 'mouse', needlePressed);
        
        // –ï—Å–ª–∏ –º—ã—à—å –∑–∞–∂–∞—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è - –≤–æ–∑–¥–µ–π—Å—Ç–≤—É–µ–º –æ—Å—Ç—Ä–∏–µ–º –∏–≥–ª—ã
        if (isDragging && needlePressed) {
            handleNeedlePaintingAtPoint();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –º—ã—à–∏ –≤ –æ–±–ª–∞—Å—Ç—å
    gameArea.addEventListener('mouseenter', (event) => {
        const rect = gameArea.getBoundingClientRect();
        const mouseX = event.clientX - rect.left;
        const mouseY = event.clientY - rect.top;
        
        // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥–ª—É –≤ –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
        updateNeedlePosition(mouseX, mouseY, 'mouse');
        showNeedle();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
    gameArea.addEventListener('mouseleave', () => {
        hideNeedle();
        animateNeedlePress(false); // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        isDragging = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
    gameArea.addEventListener('mousedown', (event) => {
        event.preventDefault();
        isDragging = true;
        animateNeedlePress(true);
        
        const rect = gameArea.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // –°—Ä–∞–∑—É –≤–æ–∑–¥–µ–π—Å—Ç–≤—É–µ–º –æ—Å—Ç—Ä–∏–µ–º –∏–≥–ª—ã
        handleNeedlePaintingAtPoint();
    });
    
    gameArea.addEventListener('mouseup', () => {
        animateNeedlePress(false);
        isDragging = false;
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function setupMobileInteractivity(gameArea) {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    showTouchDebug('SETUP MOBILE');
    
    let isTouching = false;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
    gameArea.addEventListener('touchstart', (event) => {
        event.preventDefault();
        isTouching = true;
        isDragging = true;
        
        const touch = event.touches[0];
        const rect = gameArea.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        
        showTouchDebug(`TOUCH START: ${x.toFixed(0)}, ${y.toFixed(0)}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (–Ω–∞–∂–∞—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        updateNeedlePosition(x, y, 'touch', true);
        showNeedle();
        needlePressed = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
        
        // –í–æ–∑–¥–µ–π—Å—Ç–≤—É–µ–º –æ—Å—Ç—Ä–∏–µ–º –∏–≥–ª—ã
        handleNeedlePaintingAtPoint();
    }, { passive: false });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–ª—å—Ü–∞
    gameArea.addEventListener('touchmove', (event) => {
        if (!isTouching) return;
        
        event.preventDefault();
        const touch = event.touches[0];
        const rect = gameArea.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥–ª—É —Å–ª–µ–¥–æ–º –∑–∞ –ø–∞–ª—å—Ü–µ–º (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        updateNeedlePosition(x, y, 'touch', needlePressed);
        
        // –í–æ–∑–¥–µ–π—Å—Ç–≤—É–µ–º –æ—Å—Ç—Ä–∏–µ–º –∏–≥–ª—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        if (needlePressed) {
            handleNeedlePaintingAtPoint();
        }
    }, { passive: false });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
    gameArea.addEventListener('touchend', (event) => {
        isTouching = false;
        isDragging = false;
        
        showTouchDebug('TOUCH END');
        
        // –û—Ç–ø—É—Å–∫–∞–µ–º –∏–≥–ª—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º
        needlePressed = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
        hideNeedle();
    }, { passive: false });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥–ª—É
function showNeedle() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    
    if (needleSprite) {
        needleSprite.visible = true;
        
        if (needleShadowSprite) {
            needleShadowSprite.visible = true;
        }
        
        if (isDev) {
            console.log('üëÅÔ∏è –ò–≥–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        }
    }
}

// –°–∫—Ä—ã—Ç—å –∏–≥–ª—É
function hideNeedle() {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    
    if (needleSprite) {
        needleSprite.visible = false;
        
        if (needleShadowSprite) {
            needleShadowSprite.visible = false;
        }
        
        if (isDev) {
            console.log('üôà –ò–≥–ª–∞ —Å–∫—Ä—ã—Ç–∞');
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥–ª—ã
function updateNeedlePosition(x, y, inputType, pressed = false) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    showDebugPoint(x, y);
    
    const needleConfig = CONFIG.needle;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    if (inputType === 'mouse') {
        needleSprite.anchor.set(needleConfig.mouseOffset.x, needleConfig.mouseOffset.y);
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–Ω—å
        if (isMobile) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å touch –Ω–∞ mouse (–≥–∏–±—Ä–∏–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±
            needleSprite.scale.y = Math.abs(needleSprite.scale.y);
        }
        if (needleShadowSprite) {
            needleShadowSprite.anchor.set(needleConfig.mouseOffset.x, needleConfig.mouseOffset.y);
            needleShadowSprite.visible = true;
        }
    } else if (inputType === 'touch') {
        needleSprite.anchor.set(needleConfig.touchOffset.x, needleConfig.touchOffset.y);
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–Ω—å —É–∂–µ —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if (needleShadowSprite) {
            needleShadowSprite.visible = false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è
    updateNeedleAndShadowPositions(needleSprite, needleShadowSprite, x, y, pressed);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
function isPointInsideCookie(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    const distance = Math.sqrt(
        Math.pow(x - cookieCenterX, 2) + 
        Math.pow(y - cookieCenterY, 2)
    );
    
    return distance <= cookieRadius;
}

// –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã
function animateNeedlePress(pressed) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    const shadowConfig = CONFIG.needle.shadow;
    needlePressed = pressed;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–≥–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
    if (pressed) {
        const insideCookie = isPointInsideCookie(currentClickPoint.x, currentClickPoint.y);
        if (isDev) {
        }
        
        if (insideCookie) {
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø–µ—á–µ–Ω—å–∫–∏
            if (isDev) {
            }
        }
    }
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (isMobile) {
        const needlePos = calculateNeedlePosition(currentClickPoint.x, currentClickPoint.y, pressed);
        const shadowPos = calculateShadowPosition(currentClickPoint.x, currentClickPoint.y, pressed);
        
        needleSprite.x = needlePos.x;
        needleSprite.y = needlePos.y;
        needleBaseY = needlePos.y;
        
        if (needleShadowSprite) {
            needleShadowSprite.x = shadowPos.x;
            needleShadowSprite.y = shadowPos.y;
        }
        return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    if (needleSprite.pressAnimation) {
        cancelAnimationFrame(needleSprite.pressAnimation);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–≥–ª—ã –∏ —Ç–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    const needleStartPos = { x: needleSprite.x, y: needleSprite.y };
    const shadowStartPos = needleShadowSprite ? { x: needleShadowSprite.x, y: needleShadowSprite.y } : { x: 0, y: 0 };
    
    const needleTargetPos = calculateNeedlePosition(currentClickPoint.x, currentClickPoint.y, pressed);
    const shadowTargetPos = calculateShadowPosition(currentClickPoint.x, currentClickPoint.y, pressed);
    
    const duration = shadowConfig.animationDuration * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–≥–ª—É
        needleSprite.x = needleStartPos.x + (needleTargetPos.x - needleStartPos.x) * easeProgress;
        needleSprite.y = needleStartPos.y + (needleTargetPos.y - needleStartPos.y) * easeProgress;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–Ω—å
        if (needleShadowSprite) {
            needleShadowSprite.x = shadowStartPos.x + (shadowTargetPos.x - shadowStartPos.x) * easeProgress;
            needleShadowSprite.y = shadowStartPos.y + (shadowTargetPos.y - shadowStartPos.y) * easeProgress;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y
        needleBaseY = needleSprite.y;
        
        if (progress < 1) {
            needleSprite.pressAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.pressAnimation = null;
        }
    }
    
    needleSprite.pressAnimation = requestAnimationFrame(animate);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥–ª—ã –∫ –∫–∞—Å–∞–Ω–∏—é (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
function animateNeedleToTouch(targetX, targetY) {
    const needleSprite = window.needle;
    const needleShadowSprite = window.needleShadow;
    if (!needleSprite) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    showDebugPoint(targetX, targetY);
    
    const duration = CONFIG.needle.mobile.animationDuration * 1000;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (needleSprite.moveAnimation) {
        cancelAnimationFrame(needleSprite.moveAnimation);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
    const needleStartPos = { x: needleSprite.x, y: needleSprite.y };
    const shadowStartPos = needleShadowSprite ? { x: needleShadowSprite.x, y: needleShadowSprite.y } : { x: 0, y: 0 };
    
    const needleTargetPos = calculateNeedlePosition(targetX, targetY, false);
    const shadowTargetPos = calculateShadowPosition(targetX, targetY, false);
    
    const startTime = performance.now();
    
    function animate() {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ease-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–≥–ª—É
        needleSprite.x = needleStartPos.x + (needleTargetPos.x - needleStartPos.x) * easeProgress;
        needleSprite.y = needleStartPos.y + (needleTargetPos.y - needleStartPos.y) * easeProgress;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–Ω—å
        if (needleShadowSprite) {
            needleShadowSprite.x = shadowStartPos.x + (shadowTargetPos.x - shadowStartPos.x) * easeProgress;
            needleShadowSprite.y = shadowStartPos.y + (shadowTargetPos.y - shadowStartPos.y) * easeProgress;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∫–ª–∏–∫–∞ –∏ –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é Y —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
        if (isMobile) {
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–º–µ—â–∞–µ–º –≤ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –∏–≥–ª—ã (–æ—Å—Ç—Ä–∏–µ)
            currentClickPoint.x = targetX - needleSprite.width / 2;
            currentClickPoint.y = targetY + needleSprite.height / 2;
        } else {
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            currentClickPoint.x = targetX;
            currentClickPoint.y = targetY;
        }
        needleBaseY = needleSprite.y;
        
        if (progress < 1) {
            needleSprite.moveAnimation = requestAnimationFrame(animate);
        } else {
            needleSprite.moveAnimation = null;
        }
    }
    
    needleSprite.moveAnimation = requestAnimationFrame(animate);
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–±—Ä–∞–Ω–∞ - –∏–≥–ª–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –≥–¥–µ –º—ã—à—å

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
function animateHexagonFall(hexContainer, hexRadius, realX, realY) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!hexContainer) {
        console.warn('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–¥–∞—é—â–∏–π –∫—É—Å–æ—á–µ–∫ –Ω–∞ –∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω (–Ω–∏–∂–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
    if (hexContainer.parent) {
        hexContainer.parent.setChildIndex(hexContainer, 0);
    }
    
    const config = CONFIG.cookie.pieces.chipAnimation;
    
    // –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const startX = realX || hexContainer.x;
    const startY = realY || hexContainer.y;
    const startScale = hexContainer.scale.x;
    const startAlpha = hexContainer.alpha;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const velocityX = Math.random() * (config.initialVelocity.x.max - config.initialVelocity.x.min) + config.initialVelocity.x.min;
    const velocityY = Math.random() * (config.initialVelocity.y.max - config.initialVelocity.y.min) + config.initialVelocity.y.min;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Å–∫–æ—Ä–æ—Å—Ç–∏
    const speedVariation = 0.8 + Math.random() * 0.4; // –û—Ç 0.8 –¥–æ 1.2 - –Ω–µ–±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    const duration = config.duration * 1000 * speedVariation; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const startTime = performance.now();
    let lastLogTime = startTime;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
    const gameArea = document.querySelector('.game-area');
    const screenHeight = gameArea.clientHeight;
    
    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    function animate() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!hexContainer || !hexContainer.parent) {
            return;
        }
        
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // –ü–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        const fallDistance = screenHeight + hexRadius * 2; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è
        const gravity = config.gravity; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–∑–∏–∫–∏
        const timeInSeconds = elapsed / 1000; // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const currentX = startX + velocityX * timeInSeconds;
        const currentY = startY + velocityY * timeInSeconds + gravity * timeInSeconds * timeInSeconds;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        hexContainer.x = currentX;
        hexContainer.y = currentY;
        
        // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ)
        // –§–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω - –∫—É—Å–æ—á–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
        
        if (hexContainer) {
            const scaleProgress = Math.min(progress * 2, 1); // –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
            const currentScale = startScale * (config.scale.from + (config.scale.to - config.scale.from) * scaleProgress);
            hexContainer.scale.set(currentScale);
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∫–∞ –∫—É—Å–æ—á–µ–∫ –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        if (currentY < screenHeight + hexRadius * 2) {
            requestAnimationFrame(animate);
        } else {
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–≥–¥–∞ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
            if (hexContainer.parent) {
                hexContainer.parent.removeChild(hexContainer);
                hexContainer.destroy();
            }
        }
    }
    
    animate();
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
function interpolateColor(colorFrom, colorTo, factor) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ hex —Ü–≤–µ—Ç–æ–≤
    const rFrom = (colorFrom >> 16) & 0xFF;
    const gFrom = (colorFrom >> 8) & 0xFF;
    const bFrom = colorFrom & 0xFF;
    
    const rTo = (colorTo >> 16) & 0xFF;
    const gTo = (colorTo >> 8) & 0xFF;
    const bTo = colorTo & 0xFF;
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const r = Math.round(rFrom + (rTo - rFrom) * factor);
    const g = Math.round(gFrom + (gTo - gFrom) * factor);
    const b = Math.round(bFrom + (bTo - bFrom) * factor);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
    return (r << 16) | (g << 8) | b;
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏
function startPulseAnimation(app) {
    function animate() {
        const centerShapeContainer = window.centerShape;
        
        if (centerShapeContainer && centerShapeContainer.pulseShape && CONFIG.centerShape.pulse.enabled) {
            const currentTime = Date.now();
            const elapsed = (currentTime - centerShapeContainer.pulseStartTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const pulseConfig = CONFIG.centerShape.pulse;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—É—Å–æ–∏–¥—ã
            const phase = elapsed * pulseConfig.speed * 2 * Math.PI;
            const normalizedSin = (Math.sin(phase) + 1) / 2; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç
            const currentColor = interpolateColor(pulseConfig.colorFrom, pulseConfig.colorTo, normalizedSin);
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ñ–æ—Ä–º—É —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
            const pulseShape = centerShapeContainer.pulseShape;
            if (pulseShape) {
                pulseShape.clear();
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã
                const shapeSize = centerShapeContainer.cookieSize * CONFIG.centerShape.sizePercent;
                const pulseConfigUpdated = {
                    form: CONFIG.centerShape.form,
                    size: shapeSize,
                    color: currentColor,
                    lineWidth: pulseConfig.lineWidth,
                    alpha: pulseConfig.alpha,
                    dashed: pulseConfig.dashed,
                    dashLength: pulseConfig.dashLength,
                    gapLength: pulseConfig.gapLength
                };
                
                drawCenterShape(pulseShape, 0, 0, pulseConfigUpdated);
            }
        }
        
        requestAnimationFrame(animate);
    }
    
    animate();
}






// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—Ü (–ø–µ—á–µ–Ω—å–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞)
function isPointWithinBoundaries(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–µ—á–µ–Ω—å–∫–∏
    const distanceFromCookieCenter = Math.sqrt(
        Math.pow(x - cookieCenterX, 2) + 
        Math.pow(y - cookieCenterY, 2)
    );
    
    if (distanceFromCookieCenter >= cookieRadius - 2) {
        return false; // –í–Ω–µ –ø–µ—á–µ–Ω—å–∫–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É (–Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä—å)
    const centerShapeContainer = window.centerShape;
    if (centerShapeContainer) {
        const centerRadius = (cookieSprite.width * CONFIG.centerShape.sizePercent) / 2;
        const distanceFromCenter = Math.sqrt(
            Math.pow(x - cookieCenterX, 2) + 
            Math.pow(y - cookieCenterY, 2)
        );
        
        if (distanceFromCenter <= centerRadius) {
            return false; // –í–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        }
    }
    
    return true;
}

// –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ (–ø–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–≥—É—Ä–∞)
function findExactBoundaryIntersection(x1, y1, x2, y2) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return null;
    
    const cookieRadius = cookieSprite.width / 2;
    const cookieCenterX = cookieSprite.x;
    const cookieCenterY = cookieSprite.y;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π –ø–µ—á–µ–Ω—å–∫–∏
    const cookieBoundary = findCircleIntersection(
        x1, y1, x2, y2,
        cookieCenterX, cookieCenterY, cookieRadius - 2
    );
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π
    const centerShapeContainer = window.centerShape;
    let centerBoundary = null;
    if (centerShapeContainer) {
        const centerRadius = (cookieSprite.width * CONFIG.centerShape.sizePercent) / 2;
        centerBoundary = findCircleIntersection(
            x1, y1, x2, y2,
            cookieCenterX, cookieCenterY, centerRadius
        );
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    if (cookieBoundary && centerBoundary) {
        const distToCookie = Math.sqrt(Math.pow(cookieBoundary.x - x1, 2) + Math.pow(cookieBoundary.y - y1, 2));
        const distToCenter = Math.sqrt(Math.pow(centerBoundary.x - x1, 2) + Math.pow(centerBoundary.y - y1, 2));
        return distToCookie < distToCenter ? cookieBoundary : centerBoundary;
    }
    
    return cookieBoundary || centerBoundary;
}



// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª—É—á–∞ —Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é
function findCircleIntersection(x1, y1, x2, y2, cx, cy, radius) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const fx = x1 - cx;
    const fy = y1 - cy;
    
    const a = dx * dx + dy * dy;
    const b = 2 * (fx * dx + fy * dy);
    const c = (fx * fx + fy * fy) - radius * radius;
    
    const discriminant = b * b - 4 * a * c;
    
    if (discriminant < 0) {
        return null; // –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    }
    
    const discriminantSqrt = Math.sqrt(discriminant);
    const t1 = (-b - discriminantSqrt) / (2 * a);
    const t2 = (-b + discriminantSqrt) / (2 * a);
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è (t > 0 –∏ t <= 1)
    let t = null;
    if (t1 >= 0 && t1 <= 1) {
        t = t1;
    } else if (t2 >= 0 && t2 <= 1) {
        t = t2;
    }
    
    if (t !== null) {
        return {
            x: x1 + t * dx,
            y: y1 + t * dy
        };
    }
    
    return null;
}


// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤
function findLineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
    const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    
    if (Math.abs(denom) < 1e-10) {
        return null; // –õ–∏–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã
    }
    
    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;
    const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –æ–±–æ–∏—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤
    if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
        const intersection = {
            x: x1 + t * (x2 - x1),
            y: y1 + t * (y2 - y1)
        };
        
        return intersection;
    }
    
    return null;
}



// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
function isPointInTriangle(pointX, pointY, centerX, centerY, size) {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–∫–∞–∫ –≤ drawTriangleShape)
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    // –í–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ drawTriangleShape)
    const x1 = centerX;                    // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    const y1 = centerY - (height - centroidOffsetY);
    
    const x2 = centerX + halfBase;         // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    const y2 = centerY + centroidOffsetY;
    
    const x3 = centerX - halfBase;         // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞  
    const y3 = centerY + centroidOffsetY;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isDev && Math.random() < 0.001) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∫–æ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
        console.log(`üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: —Ä–∞–∑–º–µ—Ä=${size}, –≤–µ—Ä—à–∏–Ω—ã: (${x1.toFixed(1)}, ${y1.toFixed(1)}), (${x2.toFixed(1)}, ${y2.toFixed(1)}), (${x3.toFixed(1)}, ${y3.toFixed(1)})`);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ä–∏—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const denominator = (y2 - y3) * (x1 - x3) + (x3 - x2) * (y1 - y3);
    
    if (Math.abs(denominator) < 1e-10) {
        return false; // –í—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
    }
    
    const a = ((y2 - y3) * (pointX - x3) + (x3 - x2) * (pointY - y3)) / denominator;
    const b = ((y3 - y1) * (pointX - x3) + (x1 - x3) * (pointY - y3)) / denominator;
    const c = 1 - a - b;
    
    // –¢–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –µ—Å–ª–∏ –≤—Å–µ –±–∞—Ä–∏—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã >= 0
    return a >= 0 && b >= 0 && c >= 0;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø–µ—á–µ–Ω—å—è)
function isPointInCoreArea(x, y) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    const coreSize = (cookieSprite.width * centerShapeConfig.sizePercent) / 2;
    
    switch (centerShapeConfig.form) {
        case 1: // –ö—Ä—É–≥
            const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);
            return distance <= coreSize;
            
        case 2: // –ö–≤–∞–¥—Ä–∞—Ç
            return Math.abs(x - centerX) <= coreSize && Math.abs(y - centerY) <= coreSize;
            
        case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (—Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            return isPointInTriangle(x, y, centerX, centerY, coreSize * 2); // coreSize —ç—Ç–æ –ø–æ–ª–æ–≤–∏–Ω–∞, –∞ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            
        default:
            return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∫—É—Å–æ—á–µ–∫ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function isHexagonIntersectingCenterBoundary(hexagon) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return false;
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    const coreSize = (cookieSprite.width * centerShapeConfig.sizePercent) / 2;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const vertices = [];
    const sides = CONFIG.cookie.pieces.polygonSides;
    const enlargedRadius = hexagon.radius * CONFIG.cookie.pieces.sizeMultiplier;
    
    for (let j = 0; j < sides; j++) {
        const angle = (j * 2 * Math.PI) / sides;
        const vx = hexagon.x + Math.cos(angle) * enlargedRadius;
        const vy = hexagon.y + Math.sin(angle) * enlargedRadius;
        vertices.push({ x: vx, y: vy });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≤–µ—Ä—à–∏–Ω—É
    let insideCount = 0;
    let outsideCount = 0;
    
    for (const vertex of vertices) {
        if (isPointInCoreArea(vertex.x, vertex.y)) {
            insideCount++;
        } else {
            outsideCount++;
        }
    }
    
    // –ö—É—Å–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –≥—Ä–∞–Ω–∏—Ü–µ–π, –µ—Å–ª–∏ —á–∞—Å—Ç—å –≤–µ—Ä—à–∏–Ω –≤–Ω—É—Ç—Ä–∏, —á–∞—Å—Ç—å —Å–Ω–∞—Ä—É–∂–∏
    return insideCount > 0 && outsideCount > 0;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π –∫—É—Å–æ—á–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–µ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function createSplitHexagonParts(hexagon) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return null;
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    const coreSize = (cookieSprite.width * centerShapeConfig.sizePercent) / 2;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const vertices = [];
    const sides = CONFIG.cookie.pieces.polygonSides;
    const enlargedRadius = hexagon.radius * CONFIG.cookie.pieces.sizeMultiplier;
    
    for (let j = 0; j < sides; j++) {
        const angle = (j * 2 * Math.PI) / sides;
        const vx = hexagon.x + Math.cos(angle) * enlargedRadius;
        const vy = hexagon.y + Math.sin(angle) * enlargedRadius;
        vertices.push({ x: vx, y: vy });
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–µ
    const insideVertices = [];
    const outsideVertices = [];
    
    for (const vertex of vertices) {
        if (isPointInCoreArea(vertex.x, vertex.y)) {
            insideVertices.push(vertex);
        } else {
            outsideVertices.push(vertex);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω–æ–≤ –∫—É—Å–æ—á–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∏ –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–µ–π
    const innerPart = { 
        ...hexagon, 
        id: hexagon.id + '_inner',
        isSplitPart: true,
        originalId: hexagon.id,
        partType: 'inner'
    };
    
    const outerPart = { 
        ...hexagon, 
        id: hexagon.id + '_outer',
        isSplitPart: true,
        originalId: hexagon.id,
        partType: 'outer'
    };
    
    return { innerPart, outerPart, insideVertices, outsideVertices };
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å –∫—É—Å–æ—á–∫–æ–º
function calculateShapeBoundaryIntersections(hexagon) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return [];
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    const coreSize = (cookieSprite.width * centerShapeConfig.sizePercent) / 2;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–±—Ä–∞ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const vertices = [];
    const sides = CONFIG.cookie.pieces.polygonSides;
    const enlargedRadius = hexagon.radius * CONFIG.cookie.pieces.sizeMultiplier;
    
    for (let j = 0; j < sides; j++) {
        const angle = (j * 2 * Math.PI) / sides;
        const vx = hexagon.x + Math.cos(angle) * enlargedRadius;
        const vy = hexagon.y + Math.sin(angle) * enlargedRadius;
        vertices.push({ x: vx, y: vy });
    }
    
    const intersections = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π —Ñ–æ—Ä–º—ã
    for (let i = 0; i < vertices.length; i++) {
        const v1 = vertices[i];
        const v2 = vertices[(i + 1) % vertices.length];
        
        let intersection = null;
        
        switch (centerShapeConfig.form) {
            case 1: // –ö—Ä—É–≥
                intersection = findLineCircleIntersection(
                    v1.x, v1.y, v2.x, v2.y,
                    centerX, centerY, coreSize
                );
                break;
                
            case 2: // –ö–≤–∞–¥—Ä–∞—Ç
                intersection = findLineSquareIntersection(
                    v1.x, v1.y, v2.x, v2.y,
                    centerX, centerY, coreSize
                );
                break;
                
            case 3: // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                intersection = findLineTriangleIntersection(
                    v1.x, v1.y, v2.x, v2.y,
                    centerX, centerY, coreSize * 2
                );
                break;
        }
        
        if (intersection) {
            intersections.push(...intersection);
        }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –±–ª–∏–∑–∫–∏—Ö —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const uniqueIntersections = [];
    const tolerance = 0.1; // –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    for (const point of intersections) {
        let isDuplicate = false;
        for (const existing of uniqueIntersections) {
            const distance = Math.sqrt(Math.pow(point.x - existing.x, 2) + Math.pow(point.y - existing.y, 2));
            if (distance < tolerance) {
                isDuplicate = true;
                break;
            }
        }
        if (!isDuplicate) {
            uniqueIntersections.push(point);
        }
    }
    
    return uniqueIntersections;
}

// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏ —Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é
function findLineCircleIntersection(x1, y1, x2, y2, cx, cy, radius) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const fx = x1 - cx;
    const fy = y1 - cy;
    
    const a = dx * dx + dy * dy;
    const b = 2 * (fx * dx + fy * dy);
    const c = fx * fx + fy * fy - radius * radius;
    
    const discriminant = b * b - 4 * a * c;
    
    if (discriminant < 0) return null;
    
    const intersections = [];
    const sqrt_discriminant = Math.sqrt(discriminant);
    
    const t1 = (-b - sqrt_discriminant) / (2 * a);
    const t2 = (-b + sqrt_discriminant) / (2 * a);
    
    if (t1 >= 0 && t1 <= 1) {
        intersections.push({
            x: x1 + t1 * dx,
            y: y1 + t1 * dy
        });
    }
    
    if (t2 >= 0 && t2 <= 1 && t2 !== t1) {
        intersections.push({
            x: x1 + t2 * dx,
            y: y1 + t2 * dy
        });
    }
    
    return intersections.length > 0 ? intersections : null;
}

// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏ —Å –∫–≤–∞–¥—Ä–∞—Ç–æ–º
function findLineSquareIntersection(x1, y1, x2, y2, cx, cy, halfSize) {
    const intersections = [];
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –∫–≤–∞–¥—Ä–∞—Ç–∞
    const left = cx - halfSize;
    const right = cx + halfSize;
    const top = cy - halfSize;
    const bottom = cy + halfSize;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç–∞
    const sides = [
        { x1: left, y1: top, x2: right, y2: top },     // –≤–µ—Ä—Ö
        { x1: right, y1: top, x2: right, y2: bottom }, // –ø—Ä–∞–≤–æ
        { x1: right, y1: bottom, x2: left, y2: bottom }, // –Ω–∏–∑
        { x1: left, y1: bottom, x2: left, y2: top }    // –ª–µ–≤–æ
    ];
    
    for (const side of sides) {
        const intersection = findLineLineIntersection(
            x1, y1, x2, y2,
            side.x1, side.y1, side.x2, side.y2
        );
        if (intersection) {
            intersections.push(intersection);
        }
    }
    
    return intersections.length > 0 ? intersections : null;
}

// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏ —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
function findLineTriangleIntersection(x1, y1, x2, y2, cx, cy, size) {
    const intersections = [];
    
    // –í–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ drawTriangleShape)
    const height = size * Math.sqrt(3) / 2;
    const halfBase = size / 2;
    const centroidOffsetY = height / 3;
    
    const vertices = [
        { x: cx, y: cy - (height - centroidOffsetY) },           // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        { x: cx + halfBase, y: cy + centroidOffsetY },           // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
        { x: cx - halfBase, y: cy + centroidOffsetY }            // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    for (let i = 0; i < 3; i++) {
        const v1 = vertices[i];
        const v2 = vertices[(i + 1) % 3];
        
        const intersection = findLineLineIntersection(
            x1, y1, x2, y2,
            v1.x, v1.y, v2.x, v2.y
        );
        
        if (intersection) {
            intersections.push(intersection);
        }
    }
    
    return intersections.length > 0 ? intersections : null;
}

// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –ª–∏–Ω–∏–π
function findLineLineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
    const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    
    if (Math.abs(denom) < 1e-10) return null; // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    
    const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;
    const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;
    
    if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
        return {
            x: x1 + t * (x2 - x1),
            y: y1 + t * (y2 - y1)
        };
    }
    
    return null;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Å–æ–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∏ –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–µ–π –∫—É—Å–æ—á–∫–∞
function createSplitMasks(hexagon, intersections) {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return null;
    
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    const centerShapeConfig = CONFIG.centerShape;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
    const vertices = [];
    const sides = CONFIG.cookie.pieces.polygonSides;
    const enlargedRadius = hexagon.radius * CONFIG.cookie.pieces.sizeMultiplier;
    
    for (let j = 0; j < sides; j++) {
        const angle = (j * 2 * Math.PI) / sides;
        const vx = hexagon.x + Math.cos(angle) * enlargedRadius;
        const vy = hexagon.y + Math.sin(angle) * enlargedRadius;
        vertices.push({ x: vx, y: vy });
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–µ
    const insideVertices = [];
    const outsideVertices = [];
    
    for (const vertex of vertices) {
        if (isPointInCoreArea(vertex.x, vertex.y)) {
            insideVertices.push(vertex);
        } else {
            outsideVertices.push(vertex);
        }
    }
    
    if (CONFIG.dev.consoleLogging) {
        console.log(`üîÑ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫—É—Å–æ—á–∫–∞: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω=${insideVertices.length}, –≤–Ω–µ—à–Ω–∏—Ö=${outsideVertices.length}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–∞—Å—Å–∏–≤–∞–º
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ —É–≥–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    const sortedIntersections = intersections.sort((a, b) => {
        const angleA = Math.atan2(a.y - hexagon.y, a.x - hexagon.x);
        const angleB = Math.atan2(b.y - hexagon.y, b.x - hexagon.x);
        return angleA - angleB;
    });
    
    for (const point of sortedIntersections) {
        insideVertices.push(point);
        outsideVertices.push(point);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —É–≥–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∫—É—Å–æ—á–∫–∞
    const sortByAngle = (points) => {
        return points.sort((a, b) => {
            const angleA = Math.atan2(a.y - hexagon.y, a.x - hexagon.x);
            const angleB = Math.atan2(b.y - hexagon.y, b.x - hexagon.x);
            return angleA - angleB;
        });
    };
    
    const sortedInsideVertices = sortByAngle([...insideVertices]);
    const sortedOutsideVertices = sortByAngle([...outsideVertices]);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫–∏
    const innerMask = new Graphics();
    const outerMask = new Graphics();
    
    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–∞—Å–∫—É
    if (sortedInsideVertices.length >= 3) {
        const innerVertices = [];
        for (const vertex of sortedInsideVertices) {
            innerVertices.push(vertex.x - hexagon.x, vertex.y - hexagon.y);
        }
        innerMask.poly(innerVertices);
        innerMask.fill(0xFFFFFF);
    } else {
        // –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –º–∞—Å–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ
        innerMask.circle(0, 0, 2);
        innerMask.fill(0xFFFFFF);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é –º–∞—Å–∫—É
    if (sortedOutsideVertices.length >= 3) {
        const outerVertices = [];
        for (const vertex of sortedOutsideVertices) {
            outerVertices.push(vertex.x - hexagon.x, vertex.y - hexagon.y);
        }
        outerMask.poly(outerVertices);
        outerMask.fill(0xFFFFFF);
    } else {
        // –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –º–∞—Å–∫—É —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞
        const enlargedRadius = hexagon.radius * CONFIG.cookie.pieces.sizeMultiplier;
        const sides = CONFIG.cookie.pieces.polygonSides;
        const fullHexVertices = [];
        for (let j = 0; j < sides; j++) {
            const angle = (j * 2 * Math.PI) / sides;
            const vx = Math.cos(angle) * enlargedRadius;
            const vy = Math.sin(angle) * enlargedRadius;
            fullHexVertices.push(vx, vy);
        }
        outerMask.poly(fullHexVertices);
        outerMask.fill(0xFFFFFF);
    }
    
    return {
        innerMask,
        outerMask,
        insideVertices: sortedInsideVertices,
        outsideVertices: sortedOutsideVertices
    };
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–∞—Å–∫–∞–º–∏
function createSplitHexagons(x, y, hexId, rotation, tempHex, intersections, isEdgePiece) {
    const masks = createSplitMasks(tempHex, intersections);
    if (!masks) return null;
    
    const cookieTexture = Assets.get('cookie');
    const innerColor = 0xFF00FF; // –°–∏—Ä–µ–Ω–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —á–∞—Å—Ç–µ–π (–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
    const outerColor = CONFIG.dev.splitPieceColors.outer;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç–∏
    const innerContainer = new Container();
    innerContainer.x = x;
    innerContainer.y = y;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–∏
    const outerContainer = new Container();
    outerContainer.x = x;
    outerContainer.y = y;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç—ã —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –¥–ª—è –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π
    const innerTextureSprite = new Sprite(cookieTexture);
    const outerTextureSprite = new Sprite(cookieTexture);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç—ã - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å –ø–µ—á–µ–Ω—å—è
    [innerTextureSprite, outerTextureSprite].forEach(sprite => {
        sprite.anchor.set(0.5);
        sprite.width = window.cookie.width;
        sprite.height = window.cookie.height;
        // –°–º–µ—â–∞–µ–º —Å–ø—Ä–∞–π—Ç —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ (x,y) –∫—É—Å–æ—á–∫–∞ —Å–æ–≤–ø–∞–¥–∞–ª–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–æ—á–∫–æ–π –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–µ
        sprite.x = window.cookie.x - x;
        sprite.y = window.cookie.y - y;
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫–∏ –ü–†–ê–í–ò–õ–¨–ù–û: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–∞—Å–∫—É
    innerTextureSprite.mask = masks.innerMask;  // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–∞—Å–∫—É
    outerTextureSprite.mask = masks.outerMask;  // –í–Ω–µ—à–Ω—è—è —á–∞—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω–µ—à–Ω—é—é –º–∞—Å–∫—É
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç—ã –∏ –º–∞—Å–∫–∏ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫–∏ (–æ–Ω–∏ –Ω–µ–≤–∏–¥–∏–º—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏)
    innerContainer.addChild(masks.innerMask);
    outerContainer.addChild(masks.outerMask);
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç—ã —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π (–æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–µ–∑–∞–Ω—ã –º–∞—Å–∫–∞–º–∏)
    innerContainer.addChild(innerTextureSprite);
    outerContainer.addChild(outerTextureSprite);
    
    // –í—ã–≥—Ä—ã–∑—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç—É—Ä–µ –ø–µ—á–µ–Ω—å—è, –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏ –ü–û–í–ï–†–• —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const innerOverlay = new Graphics();
    const outerOverlay = new Graphics();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞
    if (CONFIG.dev.showSplitPieces) {
        // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏ –ü–†–ê–í–ò–õ–¨–ù–û: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç–∏
        if (masks.insideVertices && masks.insideVertices.length >= 3) {
            const innerVertices = [];
            for (const vertex of masks.insideVertices) {
                innerVertices.push(vertex.x - x, vertex.y - y);
            }
            innerOverlay.poly(innerVertices);
            innerOverlay.fill({ color: innerColor, alpha: 0.2 }); // –ñ–µ–ª—Ç—ã–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç–∏
            innerContainer.addChild(innerOverlay);
            
            if (CONFIG.dev.consoleLogging) {
                console.log(`üü° –°–æ–∑–¥–∞–Ω –∂–µ–ª—Ç—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç–∏ –∏–∑ ${masks.insideVertices.length} –≤–µ—Ä—à–∏–Ω`);
            }
        }
        
        if (masks.outsideVertices && masks.outsideVertices.length >= 3) {
            const outerVertices = [];
            for (const vertex of masks.outsideVertices) {
                outerVertices.push(vertex.x - x, vertex.y - y);
            }
            outerOverlay.poly(outerVertices);
            outerOverlay.fill({ color: outerColor, alpha: 0.2 }); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–∏
            outerContainer.addChild(outerOverlay);
            
            if (CONFIG.dev.consoleLogging) {
                console.log(`üü¢ –°–æ–∑–¥–∞–Ω –∑–µ–ª–µ–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —á–∞—Å—Ç–∏ –∏–∑ ${masks.outsideVertices.length} –≤–µ—Ä—à–∏–Ω`);
            }
        }
    }
    
    // –ì—Ä–∞–Ω–∏—Ü—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É–±–∏—Ä–∞–µ–º –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
    // const borderLine = new Graphics();
    // if (intersections.length >= 2) {
    //     borderLine.moveTo(intersections[0].x - x, intersections[0].y - y);
    //     for (let i = 1; i < intersections.length; i++) {
    //         borderLine.lineTo(intersections[i].x - x, intersections[i].y - y);
    //     }
    //     borderLine.stroke({ color: 0x000000, width: 2, alpha: 0.8 });
    //     
    //     // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∫ –æ–±–µ–∏–º —á–∞—Å—Ç—è–º
    //     innerContainer.addChild(borderLine.clone());
    //     outerContainer.addChild(borderLine);
    // }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ —Å—Ü–µ–Ω—É
    window.app.stage.addChild(innerContainer);
    window.app.stage.addChild(outerContainer);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫—É—Å–æ—á–∫–æ–≤
    const innerHex = {
        id: `small_hex_${hexId}_inner`,
        graphics: null,
        container: innerContainer,
        textureSprite: innerTextureSprite,
        x: x,
        y: y,
        radius: tempHex.radius,
        index: hexId,
        originalColor: innerColor,
        currentColor: innerColor,
        isPainted: false,
        isInCenterShape: true, // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
        isEdgePiece: isEdgePiece,
        isEdgeOfCenterShape: false,
        isSplitPart: true,
        partType: 'inner'
    };
    
    const outerHex = {
        id: `small_hex_${hexId}_outer`,
        graphics: null,
        container: outerContainer,
        textureSprite: outerTextureSprite,
        x: x,
        y: y,
        radius: tempHex.radius,
        index: hexId + 1,
        originalColor: outerColor,
        currentColor: outerColor,
        isPainted: false,
        isInCenterShape: false, // –í–Ω–µ—à–Ω—è—è —á–∞—Å—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–Ω–∞—Ä—É–∂–∏
        isEdgePiece: isEdgePiece,
        isEdgeOfCenterShape: false,
        isSplitPart: true,
        partType: 'outer'
    };
    
    return {
        innerHex,
        outerHex
    };
}

// –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–µ–π, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
function findDetachedAreas() {
    const cookieSprite = window.cookie;
    if (!cookieSprite) return [];
    
    const detachedAreas = [];
    const cookieRadius = cookieSprite.width / 2;
    const centerX = cookieSprite.x;
    const centerY = cookieSprite.y;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –ø–µ—á–µ–Ω—å—è
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    const testPoints = [];
    const numTestPoints = 32; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
    
    for (let i = 0; i < numTestPoints; i++) {
        const angle = (i / numTestPoints) * Math.PI * 2;
        const testRadius = cookieRadius * 0.9; // –ù–µ–º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫—Ä–∞—è
        const testX = centerX + Math.cos(angle) * testRadius;
        const testY = centerY + Math.sin(angle) * testRadius;
        
        testPoints.push({ x: testX, y: testY, angle: angle });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    for (const point of testPoints) {
        if (!isPointConnectedToCore(point.x, point.y)) {
            // –¢–æ—á–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ - —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å
            const area = createAreaAroundPoint(point);
            if (area && area.size > CONFIG.chips.minSize) {
                detachedAreas.push(area);
            }
        }
    }
    
    return detachedAreas;
}


// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –æ—Ç–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
function createAreaAroundPoint(point) {
    const areaSize = 40; // –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏
    return {
        centerX: point.x,
        centerY: point.y,
        size: areaSize,
        angle: point.angle
    };
}





// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–æ–ª–æ–≤—à–µ–≥–æ—Å—è –∫—É—Å–∫–∞
function createChip(area) {
    if (isDev) {
        console.log(`üç™ –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–æ–ª–æ–≤—à–∏–π—Å—è –∫—É—Å–æ–∫ –≤ (${area.centerX.toFixed(1)}, ${area.centerY.toFixed(1)})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫—É—Å–∫–∞
    const chip = new Graphics();
    chip.circle(0, 0, area.size / 2).fill(CONFIG.chips.visual.color);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Å–æ–∫
    chip.x = area.centerX;
    chip.y = area.centerY;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ stage (–ø–æ–≤–µ—Ä—Ö –ø–µ—á–µ–Ω—å—è)
    app.stage.addChild(chip);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–∞–ª—ã–≤–∞–Ω–∏—è
    animateChipFall(chip, area);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è –∫—É—Å–∫–∞
function animateChipFall(chip, area) {
    const physics = CONFIG.chips.physics;
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    let velocityX = physics.initialVelocity.x.min + 
                   Math.random() * (physics.initialVelocity.x.max - physics.initialVelocity.x.min);
    let velocityY = physics.initialVelocity.y.min + 
                   Math.random() * (physics.initialVelocity.y.max - physics.initialVelocity.y.min);
    
    // –í—Ä–∞—â–µ–Ω–∏–µ
    let rotationSpeed = physics.rotation.min + 
                       Math.random() * (physics.rotation.max - physics.rotation.min);
    
    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    const animate = () => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∑–∏–∫—É
        velocityY += physics.gravity;
        chip.x += velocityX;
        chip.y += velocityY;
        chip.rotation += rotationSpeed;
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        chip.scale.x *= CONFIG.chips.visual.scaleReduction;
        chip.scale.y *= CONFIG.chips.visual.scaleReduction;
        chip.alpha -= physics.fadeSpeed;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        if (chip.alpha > 0 && chip.y < app.screen.height + 100) {
            requestAnimationFrame(animate);
        } else {
            // –£–¥–∞–ª—è–µ–º –∫—É—Å–æ–∫
            app.stage.removeChild(chip);
            chip.destroy();
        }
    };
    
    animate();
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Å—ã–ø–∞–Ω–∏—è –ø–µ—á–µ–Ω—å–∫–∏
function animateFullCookieCrumble(callback) {
    const smallHexagons = window.smallHexagons;
    if (!smallHexagons || smallHexagons.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫—É—Å–æ—á–∫–æ–≤, —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback
        if (callback) callback();
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –≤–∏–¥–∏–º—ã
    const visibleHexagons = smallHexagons.filter(hex => 
        hex.container && 
        hex.container.parent && 
        !hex.isPainted
    );
    
    if (visibleHexagons.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∫—É—Å–æ—á–∫–æ–≤, —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback
        if (callback) callback();
        return;
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∫—É—Å–æ—á–∫–∏ –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã
    const centerHexagons = visibleHexagons.filter(hex => hex.isInCenterShape);
    const outerHexagons = visibleHexagons.filter(hex => !hex.isInCenterShape);
    
    // –ü–ï–†–í–ê–Ø –í–û–õ–ù–ê: –∫—É—Å–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
    centerHexagons.forEach((hex, index) => {
        // –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (0-100–º—Å)
        const randomDelay = Math.random() * 100;
        
        setTimeout(() => {
            if (hex.container && hex.container.parent && !hex.isPainted) {
                animateHexagonFall(hex.container, hex.radius, hex.x, hex.y);
                hex.isPainted = true;
            }
        }, randomDelay);
    });
    
    // –í–¢–û–†–ê–Ø –í–û–õ–ù–ê: –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ —á–µ—Ä–µ–∑ 200–º—Å
    setTimeout(() => {
        outerHexagons.forEach((hex, index) => {
            // –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (0-100–º—Å)
            const randomDelay = Math.random() * 100;
            
            setTimeout(() => {
                if (hex.container && hex.container.parent && !hex.isPainted) {
                    animateHexagonFall(hex.container, hex.radius, hex.x, hex.y);
                    hex.isPainted = true;
                }
            }, randomDelay);
        });
    }, 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
    
    // –í—ã–∑—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–µ–∏—Ö –≤–æ–ª–Ω
    setTimeout(() => {
        if (callback) callback();
    }, 1600); // 200–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ + 1400–º—Å –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã (–æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –∫—É—Å–æ—á–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã)
function checkVictoryCondition() {
    const allHexagons = window.smallHexagons;
    if (!allHexagons) return false;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫—É—Å–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –∏ –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–µ —É–ø–∞–ª–∏)
    const remainingNonCenterPieces = allHexagons.filter(hex => {
        // –ò—Å–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫—É—Å–æ—á–∫–∏
        if (hex.isSplitPart && hex.partType === 'inner') return false;
        if (hex.isInCenterShape && !hex.isSplitPart) return false;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∫—É—Å–æ—á–∫–∏ –∏ –≤–Ω–µ—à–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤
        return (!hex.isInCenterShape || (hex.isSplitPart && hex.partType === 'outer')) && 
               !hex.isPainted && 
               !hex.isEdgePiece;
    });
    
    if (isDev) {
        console.log(`üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã: –æ—Å—Ç–∞–ª–æ—Å—å –≤–Ω–µ—à–Ω–∏—Ö –∫—É—Å–æ—á–∫–æ–≤ ${remainingNonCenterPieces.length}`);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ–±—ã—á–Ω—ã—Ö –∫—É—Å–æ—á–∫–æ–≤ - –ø–æ–±–µ–¥–∞!
    return remainingNonCenterPieces.length === 0;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
function showCongratulationsModal() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ –º–æ–¥–∞–ª–∫–∞
    if (victoryShown) return;
    victoryShown = true;
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø–µ—á–µ–Ω—å–∫–∏ –¥–ª—è —Ñ–æ–Ω–∞
    const cookieTexture = Assets.get('cookie');
    const cookieDataUrl = cookieTexture ? cookieTexture.source.resource.src : '';
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'congratulations-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        animation: modalFadeIn 0.5s ease-out;
    `;
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: linear-gradient(135deg, #4CAF50, #81C784);
        border-radius: 20px;
        padding: 40px;
        text-align: center;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3), 0 0 0 8px rgba(76, 175, 80, 0.3);
        max-width: 450px;
        width: 90%;
        animation: modalAppear 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        border: 4px solid #4CAF50;
    `;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Congratulations
    const title = document.createElement('h1');
    title.textContent = 'CONGRATULATIONS!';
    title.style.cssText = `
        color: #2E7D32;
        font-size: 32px;
        margin: 0 0 20px 0;
        text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
        font-weight: 900;
        letter-spacing: 1px;
        word-wrap: break-word;
        overflow-wrap: break-word;
    `;
    
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    const subtitle = document.createElement('p');
    subtitle.textContent = 'You successfully cleared the cookie!';
    subtitle.style.cssText = `
        color: #1B5E20;
        font-size: 18px;
        margin: 0 0 30px 0;
        font-weight: 600;
    `;
    
    // –ö–Ω–æ–ø–∫–∞ Play Again
    const playAgainButton = document.createElement('button');
    playAgainButton.textContent = 'Play Again';
    playAgainButton.style.cssText = `
        background: linear-gradient(45deg, #2E7D32, #4CAF50);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 18px;
        border-radius: 10px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
    `;
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
    playAgainButton.addEventListener('mouseenter', () => {
        playAgainButton.style.transform = 'translateY(-2px)';
        playAgainButton.style.boxShadow = '0 6px 20px rgba(76, 175, 80, 0.6)';
    });
    
    playAgainButton.addEventListener('mouseleave', () => {
        playAgainButton.style.transform = 'translateY(0)';
        playAgainButton.style.boxShadow = '0 4px 15px rgba(76, 175, 80, 0.4)';
    });
    
    playAgainButton.addEventListener('click', () => {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.remove();
        victoryShown = false;
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        restartGame();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    modalContent.appendChild(title);
    modalContent.appendChild(subtitle);
    modalContent.appendChild(playAgainButton);
    modal.appendChild(modalContent);
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes modalAppear {
            from {
                opacity: 0;
                transform: scale(0.5) translateY(-50px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
    `;
    document.head.appendChild(style);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.appendChild(modal);
    
    if (isDev) {
        console.log('üèÜ –ü–æ–∫–∞–∑–∞–Ω–∞ –º–æ–¥–∞–ª–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–±–µ–¥–æ–π!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Game Over
function showGameOverModal() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ –º–æ–¥–∞–ª–∫–∞ (–Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ true)
    if (gameOverShown && document.getElementById('game-over-modal')) return;
    gameOverShown = true;
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø–µ—á–µ–Ω—å–∫–∏ –¥–ª—è —Ñ–æ–Ω–∞
    const cookieTexture = Assets.get('cookie');
    const cookieDataUrl = cookieTexture ? cookieTexture.source.resource.src : '';
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ —Å –±–ª—é—Ä–æ–º
    const modal = document.createElement('div');
    modal.id = 'game-over-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        font-family: 'Comic Sans MS', cursive, Arial, sans-serif;
        backdrop-filter: blur(8px);
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ (–±–µ–∑ –º–∏–≥–∞–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è)
    const style = document.createElement('style');
    style.textContent = `
        @keyframes modalAppear {
            0% { 
                transform: scale(0.5) rotate(-5deg);
                opacity: 0;
            }
            100% { 
                transform: scale(1) rotate(0deg);
                opacity: 1;
            }
        }
        @keyframes buttonBounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
    `;
    document.head.appendChild(style);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å bg_modal.png
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: url('./src/assets/textures/bg_modal.png');
        background-size: cover;
        background-position: center;
        position: relative;
        padding: 50px;
        border-radius: 30px;
        text-align: center;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3), 0 0 0 8px rgba(235, 141, 39, 0.3);
        max-width: 450px;
        width: 90%;
        animation: modalAppear 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        border: 4px solid #EB8D27;
    `;
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑ –±–µ–ª–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
    const contentContainer = document.createElement('div');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Game Over
    const title = document.createElement('h1');
    title.textContent = 'GAME OVER';
    title.style.cssText = `
        color: #d32f2f;
        font-size: 52px;
        margin: 0 0 20px 0;
        text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
        font-weight: 900;
        letter-spacing: 2px;
        transform: rotate(-2deg);
    `;
    
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    const subtitle = document.createElement('p');
    subtitle.textContent = 'üç™ You broke the figure! üç™';
    subtitle.style.cssText = `
        color: #8B4513;
        font-size: 20px;
        margin: 0 0 35px 0;
        font-weight: bold;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        line-height: 1.4;
    `;
    
    // –ö–Ω–æ–ø–∫–∞ Again
    const againButton = document.createElement('button');
    againButton.textContent = 'üîÑ TRY AGAIN';
    againButton.style.cssText = `
        background: linear-gradient(45deg, #4caf50, #66bb6a);
        color: white;
        border: none;
        padding: 18px 35px;
        font-size: 18px;
        font-weight: bold;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        text-transform: uppercase;
        letter-spacing: 1px;
        box-shadow: 0 8px 20px rgba(76, 175, 80, 0.3);
        animation: buttonBounce 2s ease-in-out infinite;
        border: 3px solid rgba(255, 255, 255, 0.2);
    `;
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
    againButton.addEventListener('mouseenter', () => {
        againButton.style.background = 'linear-gradient(45deg, #45a049, #5cb85c)';
        againButton.style.transform = 'translateY(-3px) scale(1.05)';
        againButton.style.boxShadow = '0 12px 25px rgba(76, 175, 80, 0.4)';
    });
    againButton.addEventListener('mouseleave', () => {
        againButton.style.background = 'linear-gradient(45deg, #4caf50, #66bb6a)';
        againButton.style.transform = 'translateY(0) scale(1)';
        againButton.style.boxShadow = '0 8px 20px rgba(76, 175, 80, 0.3)';
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
    againButton.addEventListener('click', () => {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.style.animation = 'none';
        modal.style.opacity = '0';
        modal.style.transform = 'scale(0.9)';
        modal.style.transition = 'all 0.3s ease-out';
        
        setTimeout(() => {
            document.body.removeChild(modal);
            document.head.removeChild(style);
            restartGame();
        }, 300);
    });
    
    // –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    contentContainer.appendChild(title);
    contentContainer.appendChild(subtitle);
    contentContainer.appendChild(againButton);
    modalContent.appendChild(contentContainer);
    modal.appendChild(modalContent);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(modal);
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function restartGame() {
    try {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        restoreConfigState();
        
        // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (window.app && window.app.stage) {
            window.app.stage.removeChildren();
        }
        
        // –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        needlePressed = false;
        isDragging = false;
        activeChips = [];
        gameOverShown = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –º–æ–¥–∞–ª–∫–∏
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        window.cookie = null;
        window.needle = null;
        window.needleShadow = null;
        window.centerShape = null;
        window.smallHexagons = [];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–µ—á–µ–Ω—å–∫—É –∏ –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const app = window.app;
        createCookie(app);
        createNeedle(app);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ
        setupInteractivity(app);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        startPulseAnimation(app);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        updateShapeButtons();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ hexGrid –≤ UI, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å
        const hexValue = document.getElementById('hex-value');
        if (hexValue) {
            hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
        }
        
        if (isDev) {
            console.log('üîÑ –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
    } catch (error) {
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ fallback
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
        window.location.reload();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function createShapeButtons() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingContainer = document.getElementById('shape-buttons-container');
    if (existingContainer) {
        existingContainer.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const container = document.createElement('div');
    container.id = 'shape-buttons-container';
    container.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.8);
        padding: 15px;
        border-radius: 10px;
        backdrop-filter: blur(5px);
        min-width: 200px;
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–æ—Ä–º
    const shapeLabel = document.createElement('div');
    shapeLabel.textContent = 'Shape';
    shapeLabel.style.cssText = `
        color: #fff;
        font-size: 12px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 5px;
    `;
    container.appendChild(shapeLabel);
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º
    const shapesContainer = document.createElement('div');
    shapesContainer.style.cssText = `
        display: flex;
        gap: 10px;
        justify-content: center;
    `;
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º
    const shapes = [
        { id: 1, name: 'Circle', symbol: '‚óè', color: '#4CAF50' },
        { id: 2, name: 'Square', symbol: '‚ñ†', color: '#2196F3' },
        { id: 3, name: 'Triangle', symbol: '‚ñ≤', color: '#FF9800' }
    ];
    
    shapes.forEach(shape => {
        const button = document.createElement('button');
        button.textContent = shape.symbol;
        button.title = shape.name;
        
        const isActive = CONFIG.centerShape.form === shape.id;
        
        button.style.cssText = `
            width: 50px;
            height: 50px;
            border: 2px solid ${isActive ? shape.color : '#666'};
            background: ${isActive ? shape.color : 'rgba(255, 255, 255, 0.1)'};
            color: ${isActive ? 'white' : '#ccc'};
            border-radius: 8px;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        `;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã hover
        button.addEventListener('mouseenter', () => {
            button.style.transform = 'scale(1.1)';
            button.style.boxShadow = `0 0 15px ${shape.color}`;
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'scale(1)';
            button.style.boxShadow = 'none';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã
        button.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();
            changeShape(shape.id);
            updateShapeButtons(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        button.addEventListener('touchend', (event) => {
            event.preventDefault();
            event.stopPropagation();
            changeShape(shape.id);
            updateShapeButtons();
        });
        
        shapesContainer.appendChild(button);
    });
    
    container.appendChild(shapesContainer);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è hexGrid
    const hexLabel = document.createElement('div');
    hexLabel.textContent = 'Pieces Count';
    hexLabel.style.cssText = `
        color: #fff;
        font-size: 12px;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
        margin-bottom: 5px;
    `;
    container.appendChild(hexLabel);
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è hexGrid
    const hexContainer = document.createElement('div');
    hexContainer.style.cssText = `
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: center;
    `;
    
    // –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è
    const decreaseBtn = document.createElement('button');
    decreaseBtn.textContent = '‚àí';
    decreaseBtn.title = 'Decrease pieces';
    decreaseBtn.style.cssText = `
        width: 35px;
        height: 35px;
        border: 2px solid #666;
        background: rgba(255, 255, 255, 0.1);
        color: #ccc;
        border-radius: 6px;
        font-size: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const hexValue = document.createElement('span');
    hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
    hexValue.style.cssText = `
        color: #fff;
        font-size: 14px;
        font-weight: bold;
        min-width: 30px;
        text-align: center;
    `;
    
    // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    const increaseBtn = document.createElement('button');
    increaseBtn.textContent = '+';
    increaseBtn.title = 'Increase pieces';
    increaseBtn.style.cssText = `
        width: 35px;
        height: 35px;
        border: 2px solid #666;
        background: rgba(255, 255, 255, 0.1);
        color: #ccc;
        border-radius: 6px;
        font-size: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è hexGrid –∫–Ω–æ–ø–æ–∫
    decreaseBtn.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        changeHexGrid(CONFIG.cookie.pieces.hexGrid - 5);
        hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
    });
    
    increaseBtn.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        changeHexGrid(CONFIG.cookie.pieces.hexGrid + 5);
        hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    decreaseBtn.addEventListener('touchend', (event) => {
        event.preventDefault();
        event.stopPropagation();
        changeHexGrid(CONFIG.cookie.pieces.hexGrid - 5);
        hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
    });
    
    increaseBtn.addEventListener('touchend', (event) => {
        event.preventDefault();
        event.stopPropagation();
        changeHexGrid(CONFIG.cookie.pieces.hexGrid + 5);
        hexValue.textContent = CONFIG.cookie.pieces.hexGrid;
    });
    
    // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è hexGrid –∫–Ω–æ–ø–æ–∫
    [decreaseBtn, increaseBtn].forEach(btn => {
        btn.addEventListener('mouseenter', () => {
            btn.style.transform = 'scale(1.1)';
            btn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        btn.addEventListener('mouseleave', () => {
            btn.style.transform = 'scale(1)';
            btn.style.background = 'rgba(255, 255, 255, 0.1)';
        });
    });
    
    hexContainer.appendChild(decreaseBtn);
    hexContainer.appendChild(hexValue);
    hexContainer.appendChild(increaseBtn);
    container.appendChild(hexContainer);
    
    document.body.appendChild(container);
    
    if (isDev) {
        console.log('üîò –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω—ã');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function smoothRestart(restartCallback) {
    const gameArea = document.querySelector('.game-area');
    const canvas = document.getElementById('game-canvas');
    
    if (!gameArea || !canvas) {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        restartCallback();
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è fade —ç—Ñ—Ñ–µ–∫—Ç–∞
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
        opacity: 0;
        pointer-events: none;
        transition: opacity ${CONFIG.transition.fadeOut.duration}ms ${CONFIG.transition.fadeOut.easing};
        z-index: 1000;
        border-radius: inherit;
    `;
    
    gameArea.style.position = 'relative';
    gameArea.appendChild(overlay);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º fade out
    requestAnimationFrame(() => {
        overlay.style.opacity = '1';
    });
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è fade out –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    setTimeout(() => {
        restartCallback();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º fade in –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            overlay.style.transition = `opacity ${CONFIG.transition.fadeIn.duration}ms ${CONFIG.transition.fadeIn.easing}`;
            overlay.style.opacity = '0';
            
            // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (overlay.parentNode) {
                    overlay.parentNode.removeChild(overlay);
                }
            }, CONFIG.transition.fadeIn.duration);
            
        }, CONFIG.transition.fadeIn.delay);
        
    }, CONFIG.transition.fadeOut.duration);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
function saveConfigState() {
    try {
        const configState = {
            centerShapeForm: CONFIG.centerShape.form,
            hexGrid: CONFIG.cookie.pieces.hexGrid
        };
        localStorage.setItem('cookindle_config', JSON.stringify(configState));
        
        if (isDev) {
            console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', configState);
        }
    } catch (error) {
        if (isDev) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        }
    }
}

function restoreConfigState() {
    try {
        const savedState = localStorage.getItem('cookindle_config');
        if (savedState) {
            const configState = JSON.parse(savedState);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã–µ
            if (configState.centerShapeForm && [1, 2, 3].includes(configState.centerShapeForm)) {
                CONFIG.centerShape.form = configState.centerShapeForm;
            }
            
            if (configState.hexGrid && configState.hexGrid >= 15 && configState.hexGrid <= 65) {
                CONFIG.cookie.pieces.hexGrid = configState.hexGrid;
            }
            
            if (isDev) {
                console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', configState);
            }
            
            return true;
        }
    } catch (error) {
        if (isDev) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:', error);
        }
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ñ–æ—Ä–º—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
function changeShape(newShapeId) {
    if (CONFIG.centerShape.form === newShapeId) return; // –£–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
    
    CONFIG.centerShape.form = newShapeId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    saveConfigState();
    
    if (isDev) {
        const shapeNames = { 1: 'Circle', 2: 'Square', 3: 'Triangle' };
        console.log(`üîÑ –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${shapeNames[newShapeId]}`);
    }
    
    // –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—á–µ–Ω—å–∫–∏ —Å –Ω–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π
    if (isMobile) {
        smoothRestart(restartGame);
    } else {
        restartGame();
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É—Å–æ—á–∫–æ–≤ (hexGrid)
function changeHexGrid(newHexGrid) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const minHex = 15;
    const maxHex = 65;
    const clampedValue = Math.max(minHex, Math.min(maxHex, newHexGrid));
    
    if (CONFIG.cookie.pieces.hexGrid === clampedValue) return; // –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    
    CONFIG.cookie.pieces.hexGrid = clampedValue;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    saveConfigState();
    
    if (isDev) {
        console.log(`üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–æ—á–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${clampedValue}`);
    }
    
    // –ù–£–ñ–ù–û –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å—é –ø–µ—á–µ–Ω—å–∫—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—É—Å–æ—á–∫–æ–≤
    if (isMobile) {
        smoothRestart(restartGame);
    } else {
        restartGame();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
function updateShapeButtons() {
    const container = document.getElementById('shape-buttons-container');
    if (!container) return;
    
    const buttons = container.querySelectorAll('button');
    const shapes = [
        { id: 1, color: '#4CAF50' },
        { id: 2, color: '#2196F3' },
        { id: 3, color: '#FF9800' }
    ];
    
    buttons.forEach((button, index) => {
        const shape = shapes[index];
        if (!shape) return;
        const isActive = CONFIG.centerShape.form === shape.id;
        
        button.style.border = `2px solid ${isActive ? shape.color : '#666'}`;
        button.style.background = isActive ? shape.color : 'rgba(255, 255, 255, 0.1)';
        button.style.color = isActive ? 'white' : '#ccc';
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp().catch(console.error);